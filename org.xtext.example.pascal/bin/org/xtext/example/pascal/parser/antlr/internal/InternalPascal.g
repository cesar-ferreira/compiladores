/*
 * generated by Xtext 2.15.0
 */
grammar InternalPascal;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.pascal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.pascal.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.pascal.services.PascalGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private PascalGrammarAccess grammarAccess;

    public InternalPascalParser(TokenStream input, PascalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Begin";
   	}

   	@Override
   	protected PascalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBegin
entryRuleBegin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBeginRule()); }
	iv_ruleBegin=ruleBegin
	{ $current=$iv_ruleBegin.current; }
	EOF;

// Rule Begin
ruleBegin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBeginAccess().getElementsProgramParserRuleCall_0());
			}
			lv_elements_0_0=ruleprogram
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBeginRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.pascal.Pascal.program");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprogram
entryRuleprogram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleprogram=ruleprogram
	{ $current=$iv_ruleprogram.current; }
	EOF;

// Rule program
ruleprogram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgram_headingProgram_headingParserRuleCall_1_0_0());
					}
					lv_program_heading_1_0=ruleprogram_heading
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						set(
							$current,
							"program_heading",
							lv_program_heading_1_0,
							"org.xtext.example.pascal.Pascal.program_heading");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_1_1_0());
					}
					lv_block_2_0=ruleblock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						set(
							$current,
							"block",
							lv_block_2_0,
							"org.xtext.example.pascal.Pascal.block");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getFullStopKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleprogram_heading
entryRuleprogram_heading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgram_headingRule()); }
	iv_ruleprogram_heading=ruleprogram_heading
	{ $current=$iv_ruleprogram_heading.current; }
	EOF;

// Rule program_heading
ruleprogram_heading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='program'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgram_headingAccess().getProgramKeyword_0());
		}
		(
			(
				lv_identifier_1_0=RULE_ID
				{
					newLeafNode(lv_identifier_1_0, grammarAccess.getProgram_headingAccess().getIdentifierIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgram_headingRule());
					}
					setWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getProgram_headingAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgram_headingAccess().getIdentifier_listIdentifier_listParserRuleCall_2_1_0());
					}
					lv_identifier_list_3_0=ruleidentifier_list
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgram_headingRule());
						}
						set(
							$current,
							"identifier_list",
							lv_identifier_list_3_0,
							"org.xtext.example.pascal.Pascal.identifier_list");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getProgram_headingAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgram_headingAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleidentifier_list
entryRuleidentifier_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifier_listRule()); }
	iv_ruleidentifier_list=ruleidentifier_list
	{ $current=$iv_ruleidentifier_list.current; }
	EOF;

// Rule identifier_list
ruleidentifier_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_identifier_0_0=RULE_ID
				{
					newLeafNode(lv_identifier_0_0, grammarAccess.getIdentifier_listAccess().getIdentifierIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdentifier_listRule());
					}
					addWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getIdentifier_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_identifier_2_0=RULE_ID
					{
						newLeafNode(lv_identifier_2_0, grammarAccess.getIdentifier_listAccess().getIdentifierIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifier_listRule());
						}
						addWithLastConsumed(
							$current,
							"identifier",
							lv_identifier_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleprocedure_block
entryRuleprocedure_block returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_blockRule()); }
	iv_ruleprocedure_block=ruleprocedure_block
	{ $current=$iv_ruleprocedure_block.current; }
	EOF;

// Rule procedure_block
ruleprocedure_block returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_blockAccess().getDeclaration_partDeclaration_partParserRuleCall_0_0());
				}
				lv_declaration_part_0_0=ruledeclaration_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_blockRule());
					}
					set(
						$current,
						"declaration_part",
						lv_declaration_part_0_0,
						"org.xtext.example.pascal.Pascal.declaration_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_blockAccess().getStatement_partStatement_partParserRuleCall_1_0());
				}
				lv_statement_part_1_0=rulestatement_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_blockRule());
					}
					set(
						$current,
						"statement_part",
						lv_statement_part_1_0,
						"org.xtext.example.pascal.Pascal.statement_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunction_block
entryRulefunction_block returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_blockRule()); }
	iv_rulefunction_block=rulefunction_block
	{ $current=$iv_rulefunction_block.current; }
	EOF;

// Rule function_block
rulefunction_block returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_blockAccess().getDeclaration_partDeclaration_partParserRuleCall_0_0());
				}
				lv_declaration_part_0_0=ruledeclaration_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_blockRule());
					}
					set(
						$current,
						"declaration_part",
						lv_declaration_part_0_0,
						"org.xtext.example.pascal.Pascal.declaration_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_blockAccess().getStatement_partStatement_partParserRuleCall_1_0());
				}
				lv_statement_part_1_0=rulestatement_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_blockRule());
					}
					set(
						$current,
						"statement_part",
						lv_statement_part_1_0,
						"org.xtext.example.pascal.Pascal.statement_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleblock=ruleblock
	{ $current=$iv_ruleblock.current; }
	EOF;

// Rule block
ruleblock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getDeclaration_partDeclaration_partParserRuleCall_0_0());
				}
				lv_declaration_part_0_0=ruledeclaration_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"declaration_part",
						lv_declaration_part_0_0,
						"org.xtext.example.pascal.Pascal.declaration_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockAccess().getStatement_partStatement_partParserRuleCall_1_0());
				}
				lv_statement_part_1_0=rulestatement_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockRule());
					}
					set(
						$current,
						"statement_part",
						lv_statement_part_1_0,
						"org.xtext.example.pascal.Pascal.statement_part");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestatement_part
entryRulestatement_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatement_partRule()); }
	iv_rulestatement_part=rulestatement_part
	{ $current=$iv_rulestatement_part.current; }
	EOF;

// Rule statement_part
rulestatement_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getStatement_partAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatement_partAccess().getStatement_sequenceStatement_sequenceParserRuleCall_1_0());
				}
				lv_statement_sequence_1_0=rulestatement_sequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatement_partRule());
					}
					set(
						$current,
						"statement_sequence",
						lv_statement_sequence_1_0,
						"org.xtext.example.pascal.Pascal.statement_sequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getStatement_partAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulestatement_sequence
entryRulestatement_sequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatement_sequenceRule()); }
	iv_rulestatement_sequence=rulestatement_sequence
	{ $current=$iv_rulestatement_sequence.current; }
	EOF;

// Rule statement_sequence
rulestatement_sequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementStatementParserRuleCall_0_0());
				}
				lv_statement_0_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatement_sequenceRule());
					}
					add(
						$current,
						"statement",
						lv_statement_0_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatement_sequenceAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStatement_sequenceAccess().getStatementStatementParserRuleCall_1_1_0());
					}
					lv_statement_2_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatement_sequenceRule());
						}
						add(
							$current,
							"statement",
							lv_statement_2_0,
							"org.xtext.example.pascal.Pascal.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getLabelLabelParserRuleCall_0_0_0());
					}
					lv_label_0_0=rulelabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"label",
							lv_label_0_0,
							"org.xtext.example.pascal.Pascal.label");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getColonKeyword_0_1());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getSimple_statementSimple_statementParserRuleCall_1_0_0());
					}
					lv_simple_statement_2_0=rulesimple_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"simple_statement",
							lv_simple_statement_2_0,
							"org.xtext.example.pascal.Pascal.simple_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementAccess().getStructured_statementStructured_statementParserRuleCall_1_1_0());
					}
					lv_structured_statement_3_0=rulestructured_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementRule());
						}
						set(
							$current,
							"structured_statement",
							lv_structured_statement_3_0,
							"org.xtext.example.pascal.Pascal.structured_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulesimple_statement
entryRulesimple_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_statementRule()); }
	iv_rulesimple_statement=rulesimple_statement
	{ $current=$iv_rulesimple_statement.current; }
	EOF;

// Rule simple_statement
rulesimple_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSimple_statementAccess().getSimple_statementAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_statementAccess().getAssignment_statementAssignment_statementParserRuleCall_1_0_0());
					}
					lv_assignment_statement_1_0=ruleassignment_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
						}
						set(
							$current,
							"assignment_statement",
							lv_assignment_statement_1_0,
							"org.xtext.example.pascal.Pascal.assignment_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_statementAccess().getProcedure_statementProcedure_statementParserRuleCall_1_1_0());
					}
					lv_procedure_statement_2_0=ruleprocedure_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
						}
						set(
							$current,
							"procedure_statement",
							lv_procedure_statement_2_0,
							"org.xtext.example.pascal.Pascal.procedure_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_statementAccess().getGoto_statementGoto_statementParserRuleCall_1_2_0());
					}
					lv_goto_statement_3_0=rulegoto_statement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_statementRule());
						}
						set(
							$current,
							"goto_statement",
							lv_goto_statement_3_0,
							"org.xtext.example.pascal.Pascal.goto_statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulegoto_statement
entryRulegoto_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGoto_statementRule()); }
	iv_rulegoto_statement=rulegoto_statement
	{ $current=$iv_rulegoto_statement.current; }
	EOF;

// Rule goto_statement
rulegoto_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='goto'
		{
			newLeafNode(otherlv_0, grammarAccess.getGoto_statementAccess().getGotoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGoto_statementAccess().getLabelLabelParserRuleCall_1_0());
				}
				lv_label_1_0=rulelabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGoto_statementRule());
					}
					set(
						$current,
						"label",
						lv_label_1_0,
						"org.xtext.example.pascal.Pascal.label");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleprocedure_statement
entryRuleprocedure_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_statementRule()); }
	iv_ruleprocedure_statement=ruleprocedure_statement
	{ $current=$iv_ruleprocedure_statement.current; }
	EOF;

// Rule procedure_statement
ruleprocedure_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_statementAccess().getProcedure_identifierIdentifierParserRuleCall_0_0());
				}
				lv_procedure_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_statementRule());
					}
					set(
						$current,
						"procedure_identifier",
						lv_procedure_identifier_0_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_statementAccess().getActual_parameter_listActual_parameter_listParserRuleCall_1_0());
				}
				lv_actual_parameter_list_1_0=ruleactual_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_statementRule());
					}
					set(
						$current,
						"actual_parameter_list",
						lv_actual_parameter_list_1_0,
						"org.xtext.example.pascal.Pascal.actual_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleactual_parameter_list
entryRuleactual_parameter_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_parameter_listRule()); }
	iv_ruleactual_parameter_list=ruleactual_parameter_list
	{ $current=$iv_ruleactual_parameter_list.current; }
	EOF;

// Rule actual_parameter_list
ruleactual_parameter_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getActual_parameter_listAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActual_parameter_listAccess().getActual_parameterActual_parameterParserRuleCall_1_0());
				}
				lv_actual_parameter_1_0=ruleactual_parameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActual_parameter_listRule());
					}
					add(
						$current,
						"actual_parameter",
						lv_actual_parameter_1_0,
						"org.xtext.example.pascal.Pascal.actual_parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getActual_parameter_listAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActual_parameter_listAccess().getActual_parameterActual_parameterParserRuleCall_2_1_0());
					}
					lv_actual_parameter_3_0=ruleactual_parameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActual_parameter_listRule());
						}
						add(
							$current,
							"actual_parameter",
							lv_actual_parameter_3_0,
							"org.xtext.example.pascal.Pascal.actual_parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getActual_parameter_listAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleactual_parameter
entryRuleactual_parameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_parameterRule()); }
	iv_ruleactual_parameter=ruleactual_parameter
	{ $current=$iv_ruleactual_parameter.current; }
	EOF;

// Rule actual_parameter
ruleactual_parameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getActual_parameterAccess().getActual_valueActual_valueParserRuleCall_0_0());
				}
				lv_actual_value_0_0=ruleactual_value
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActual_parameterRule());
					}
					set(
						$current,
						"actual_value",
						lv_actual_value_0_0,
						"org.xtext.example.pascal.Pascal.actual_value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActual_parameterAccess().getActual_variableActual_variableParserRuleCall_1_0());
				}
				lv_actual_variable_1_0=ruleactual_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActual_parameterRule());
					}
					set(
						$current,
						"actual_variable",
						lv_actual_variable_1_0,
						"org.xtext.example.pascal.Pascal.actual_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActual_parameterAccess().getActual_procedureActual_procedureParserRuleCall_2_0());
				}
				lv_actual_procedure_2_0=ruleactual_procedure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActual_parameterRule());
					}
					set(
						$current,
						"actual_procedure",
						lv_actual_procedure_2_0,
						"org.xtext.example.pascal.Pascal.actual_procedure");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getActual_parameterAccess().getActual_functionActual_functionParserRuleCall_3_0());
				}
				lv_actual_function_3_0=ruleactual_function
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActual_parameterRule());
					}
					set(
						$current,
						"actual_function",
						lv_actual_function_3_0,
						"org.xtext.example.pascal.Pascal.actual_function");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleactual_function
entryRuleactual_function returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_functionRule()); }
	iv_ruleactual_function=ruleactual_function
	{ $current=$iv_ruleactual_function.current; }
	EOF;

// Rule actual_function
ruleactual_function returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActual_functionAccess().getFunction_identifierIdentifierParserRuleCall_0());
			}
			lv_function_identifier_0_0=ruleidentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActual_functionRule());
				}
				set(
					$current,
					"function_identifier",
					lv_function_identifier_0_0,
					"org.xtext.example.pascal.Pascal.identifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleactual_procedure
entryRuleactual_procedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_procedureRule()); }
	iv_ruleactual_procedure=ruleactual_procedure
	{ $current=$iv_ruleactual_procedure.current; }
	EOF;

// Rule actual_procedure
ruleactual_procedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActual_procedureAccess().getProcedure_identifierIdentifierParserRuleCall_0());
			}
			lv_procedure_identifier_0_0=ruleidentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActual_procedureRule());
				}
				set(
					$current,
					"procedure_identifier",
					lv_procedure_identifier_0_0,
					"org.xtext.example.pascal.Pascal.identifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleactual_variable
entryRuleactual_variable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_variableRule()); }
	iv_ruleactual_variable=ruleactual_variable
	{ $current=$iv_ruleactual_variable.current; }
	EOF;

// Rule actual_variable
ruleactual_variable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActual_variableAccess().getVariableVariableParserRuleCall_0());
			}
			lv_variable_0_0=rulevariable
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActual_variableRule());
				}
				set(
					$current,
					"variable",
					lv_variable_0_0,
					"org.xtext.example.pascal.Pascal.variable");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleactual_value
entryRuleactual_value returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActual_valueRule()); }
	iv_ruleactual_value=ruleactual_value
	{ $current=$iv_ruleactual_value.current; }
	EOF;

// Rule actual_value
ruleactual_value returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getActual_valueAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getActual_valueRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.xtext.example.pascal.Pascal.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleidentifier
entryRuleidentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	iv_ruleidentifier=ruleidentifier
	{ $current=$iv_ruleidentifier.current; }
	EOF;

// Rule identifier
ruleidentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_identifier_0_0=RULE_ID
			{
				newLeafNode(lv_identifier_0_0, grammarAccess.getIdentifierAccess().getIdentifierIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIdentifierRule());
				}
				setWithLastConsumed(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); }
	iv_ruleassignment_statement=ruleassignment_statement
	{ $current=$iv_ruleassignment_statement.current; }
	EOF;

// Rule assignment_statement
ruleassignment_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignment_statementAccess().getVariableVariableParserRuleCall_0_0_0());
					}
					lv_variable_0_0=rulevariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
						}
						set(
							$current,
							"variable",
							lv_variable_0_0,
							"org.xtext.example.pascal.Pascal.variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignment_statementAccess().getFunction_identifierIdentifierParserRuleCall_0_1_0());
					}
					lv_function_identifier_1_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
						}
						set(
							$current,
							"function_identifier",
							lv_function_identifier_1_0,
							"org.xtext.example.pascal.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignment_statementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignment_statementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_3_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getExpressionAccess().getExpressionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionSimple_expressionParserRuleCall_1_0());
				}
				lv_simple_expression_1_0=rulesimple_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"simple_expression",
						lv_simple_expression_1_0,
						"org.xtext.example.pascal.Pascal.simple_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRelational_operatorRelational_operatorParserRuleCall_2_0_0());
					}
					lv_relational_operator_2_0=rulerelational_operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"relational_operator",
							lv_relational_operator_2_0,
							"org.xtext.example.pascal.Pascal.relational_operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getSimple_expressionSimple_expressionParserRuleCall_2_1_0());
					}
					lv_simple_expression_3_0=rulesimple_expression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"simple_expression",
							lv_simple_expression_3_0,
							"org.xtext.example.pascal.Pascal.simple_expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulerelational_operator
entryRulerelational_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelational_operatorRule()); }
	iv_rulerelational_operator=rulerelational_operator
	{ $current=$iv_rulerelational_operator.current.getText(); }
	EOF;

// Rule relational_operator
rulerelational_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getLessThanSignGreaterThanSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getGreaterThanSignEqualsSignKeyword_5());
		}
		    |
		kw='in'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelational_operatorAccess().getInKeyword_6());
		}
	)
;

// Entry rule entryRulesimple_expression
entryRulesimple_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_expressionRule()); }
	iv_rulesimple_expression=rulesimple_expression
	{ $current=$iv_rulesimple_expression.current; }
	EOF;

// Rule simple_expression
rulesimple_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_expressionAccess().getSignSignParserRuleCall_0_0());
				}
				lv_sign_0_0=rulesign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
					}
					set(
						$current,
						"sign",
						lv_sign_0_0,
						"org.xtext.example.pascal.Pascal.sign");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermTermParserRuleCall_1_0());
				}
				lv_term_1_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
					}
					add(
						$current,
						"term",
						lv_term_1_0,
						"org.xtext.example.pascal.Pascal.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_expressionAccess().getAddition_operatorAddition_operatorParserRuleCall_2_0_0());
					}
					lv_addition_operator_2_0=ruleaddition_operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
						}
						add(
							$current,
							"addition_operator",
							lv_addition_operator_2_0,
							"org.xtext.example.pascal.Pascal.addition_operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimple_expressionAccess().getTermTermParserRuleCall_2_1_0());
					}
					lv_term_3_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimple_expressionRule());
						}
						add(
							$current,
							"term",
							lv_term_3_0,
							"org.xtext.example.pascal.Pascal.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleaddition_operator
entryRuleaddition_operator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddition_operatorRule()); }
	iv_ruleaddition_operator=ruleaddition_operator
	{ $current=$iv_ruleaddition_operator.current; }
	EOF;

// Rule addition_operator
ruleaddition_operator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAddition_operatorAccess().getSignSignParserRuleCall_0_0());
				}
				lv_sign_0_0=rulesign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddition_operatorRule());
					}
					set(
						$current,
						"sign",
						lv_sign_0_0,
						"org.xtext.example.pascal.Pascal.sign");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		otherlv_1='or'
		{
			newLeafNode(otherlv_1, grammarAccess.getAddition_operatorAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getFactorFactorParserRuleCall_0_0());
				}
				lv_factor_0_0=rulefactor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					add(
						$current,
						"factor",
						lv_factor_0_0,
						"org.xtext.example.pascal.Pascal.factor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getMultiplication_operatorMultiplication_operatorParserRuleCall_1_0_0());
					}
					lv_multiplication_operator_1_0=rulemultiplication_operator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"multiplication_operator",
							lv_multiplication_operator_1_0,
							"org.xtext.example.pascal.Pascal.multiplication_operator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getFactorFactorParserRuleCall_1_1_0());
					}
					lv_factor_2_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						add(
							$current,
							"factor",
							lv_factor_2_0,
							"org.xtext.example.pascal.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulemultiplication_operator
entryRulemultiplication_operator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplication_operatorRule()); }
	iv_rulemultiplication_operator=rulemultiplication_operator
	{ $current=$iv_rulemultiplication_operator.current.getText(); }
	EOF;

// Rule multiplication_operator
rulemultiplication_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getSolidusKeyword_1());
		}
		    |
		kw='div'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getDivKeyword_2());
		}
		    |
		kw='mod'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getModKeyword_3());
		}
		    |
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMultiplication_operatorAccess().getAndKeyword_4());
		}
	)
;

// Entry rule entryRulefactor
entryRulefactor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	iv_rulefactor=rulefactor
	{ $current=$iv_rulefactor.current; }
	EOF;

// Rule factor
rulefactor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getFactorAccess().getFactorAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getVariableVariableParserRuleCall_0_1_0());
					}
					lv_variable_1_0=rulevariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"variable",
							lv_variable_1_0,
							"org.xtext.example.pascal.Pascal.variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getNumberNumberParserRuleCall_1_0());
				}
				lv_number_2_0=rulenumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"number",
						lv_number_2_0,
						"org.xtext.example.pascal.Pascal.number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_strings_3_0=RULE_STRINGS
				{
					newLeafNode(lv_strings_3_0, grammarAccess.getFactorAccess().getStringsStringsTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFactorRule());
					}
					setWithLastConsumed(
						$current,
						"strings",
						lv_strings_3_0,
						"org.xtext.example.pascal.Pascal.strings");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getSetSetParserRuleCall_3_0());
				}
				lv_set_4_0=ruleset
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"set",
						lv_set_4_0,
						"org.xtext.example.pascal.Pascal.set");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		otherlv_5='nil'
		{
			newLeafNode(otherlv_5, grammarAccess.getFactorAccess().getNilKeyword_4());
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getBooleanBooleanParserRuleCall_5_0());
				}
				lv_boolean_6_0=ruleboolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"boolean",
						lv_boolean_6_0,
						"org.xtext.example.pascal.Pascal.boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getIdentifierIdentifierParserRuleCall_6_0());
				}
				lv_identifier_7_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_7_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFactorAccess().getFunction_designatorFunction_designatorParserRuleCall_7_0());
				}
				lv_function_designator_8_0=rulefunction_designator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFactorRule());
					}
					set(
						$current,
						"function_designator",
						lv_function_designator_8_0,
						"org.xtext.example.pascal.Pascal.function_designator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getFactorAccess().getLeftParenthesisKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getExpressionExpressionParserRuleCall_8_1_0());
					}
					lv_expression_10_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_10_0,
							"org.xtext.example.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getFactorAccess().getRightParenthesisKeyword_8_2());
			}
		)
		    |
		(
			otherlv_12='not'
			{
				newLeafNode(otherlv_12, grammarAccess.getFactorAccess().getNotKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFactorAccess().getFactorFactorParserRuleCall_9_1_0());
					}
					lv_factor_13_0=rulefactor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactorRule());
						}
						set(
							$current,
							"factor",
							lv_factor_13_0,
							"org.xtext.example.pascal.Pascal.factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleboolean
entryRuleboolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleboolean=ruleboolean
	{ $current=$iv_ruleboolean.current.getText(); }
	EOF;

// Rule boolean
ruleboolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='True'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='False'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRulefunction_designator
entryRulefunction_designator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_designatorRule()); }
	iv_rulefunction_designator=rulefunction_designator
	{ $current=$iv_rulefunction_designator.current; }
	EOF;

// Rule function_designator
rulefunction_designator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_designatorAccess().getFunction_identifierIdentifierParserRuleCall_0_0());
				}
				lv_function_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_designatorRule());
					}
					set(
						$current,
						"function_identifier",
						lv_function_identifier_0_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_designatorAccess().getActual_parameter_listActual_parameter_listParserRuleCall_1_0());
				}
				lv_actual_parameter_list_1_0=ruleactual_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_designatorRule());
					}
					set(
						$current,
						"actual_parameter_list",
						lv_actual_parameter_list_1_0,
						"org.xtext.example.pascal.Pascal.actual_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleset
entryRuleset returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	iv_ruleset=ruleset
	{ $current=$iv_ruleset.current; }
	EOF;

// Rule set
ruleset returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getSetAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetAccess().getElement_listElement_listParserRuleCall_1_0());
				}
				lv_element_list_1_0=ruleelement_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetRule());
					}
					set(
						$current,
						"element_list",
						lv_element_list_1_0,
						"org.xtext.example.pascal.Pascal.element_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getSetAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleelement_list
entryRuleelement_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElement_listRule()); }
	iv_ruleelement_list=ruleelement_list
	{ $current=$iv_ruleelement_list.current; }
	EOF;

// Rule element_list
ruleelement_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getElement_listAccess().getElement_listAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getElement_listAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getElement_listRule());
						}
						add(
							$current,
							"expression",
							lv_expression_1_0,
							"org.xtext.example.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getElement_listAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getElement_listAccess().getExpressionExpressionParserRuleCall_1_1_1_0());
						}
						lv_expression_3_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getElement_listRule());
							}
							add(
								$current,
								"expression",
								lv_expression_3_0,
								"org.xtext.example.pascal.Pascal.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRulenumber
entryRulenumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_rulenumber=rulenumber
	{ $current=$iv_rulenumber.current; }
	EOF;

// Rule number
rulenumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberAccess().getInteger_numberInteger_numberParserRuleCall_0_0());
				}
				lv_integer_number_0_0=ruleinteger_number
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberRule());
					}
					set(
						$current,
						"integer_number",
						lv_integer_number_0_0,
						"org.xtext.example.pascal.Pascal.integer_number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getNumberAccess().getReal_numberReal_numberParserRuleCall_1_0());
				}
				lv_real_number_1_0=rulereal_number
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNumberRule());
					}
					set(
						$current,
						"real_number",
						lv_real_number_1_0,
						"org.xtext.example.pascal.Pascal.real_number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulereal_number
entryRulereal_number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReal_numberRule()); }
	iv_rulereal_number=rulereal_number
	{ $current=$iv_rulereal_number.current; }
	EOF;

// Rule real_number
rulereal_number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequenceDigit_sequenceParserRuleCall_0_0_0());
					}
					lv_digit_sequence_0_0=ruledigit_sequence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReal_numberRule());
						}
						set(
							$current,
							"digit_sequence",
							lv_digit_sequence_0_0,
							"org.xtext.example.pascal.Pascal.digit_sequence");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getReal_numberAccess().getFullStopKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequence2Digit_sequenceParserRuleCall_0_2_0());
					}
					lv_digit_sequence2_2_0=ruledigit_sequence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReal_numberRule());
						}
						set(
							$current,
							"digit_sequence2",
							lv_digit_sequence2_2_0,
							"org.xtext.example.pascal.Pascal.digit_sequence");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getReal_numberAccess().getScale_factorScale_factorParserRuleCall_0_3_0());
					}
					lv_scale_factor_3_0=rulescale_factor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReal_numberRule());
						}
						set(
							$current,
							"scale_factor",
							lv_scale_factor_3_0,
							"org.xtext.example.pascal.Pascal.scale_factor");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReal_numberAccess().getDigit_sequenceDigit_sequenceParserRuleCall_1_0_0());
					}
					lv_digit_sequence_4_0=ruledigit_sequence
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReal_numberRule());
						}
						set(
							$current,
							"digit_sequence",
							lv_digit_sequence_4_0,
							"org.xtext.example.pascal.Pascal.digit_sequence");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getReal_numberAccess().getScale_factorScale_factorParserRuleCall_1_1_0());
					}
					lv_scale_factor_5_0=rulescale_factor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReal_numberRule());
						}
						set(
							$current,
							"scale_factor",
							lv_scale_factor_5_0,
							"org.xtext.example.pascal.Pascal.scale_factor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulescale_factor
entryRulescale_factor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScale_factorRule()); }
	iv_rulescale_factor=rulescale_factor
	{ $current=$iv_rulescale_factor.current; }
	EOF;

// Rule scale_factor
rulescale_factor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='E'
			{
				newLeafNode(otherlv_0, grammarAccess.getScale_factorAccess().getEKeyword_0_0());
			}
			    |
			otherlv_1='e'
			{
				newLeafNode(otherlv_1, grammarAccess.getScale_factorAccess().getEKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScale_factorAccess().getSignSignParserRuleCall_1_0());
				}
				lv_sign_2_0=rulesign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScale_factorRule());
					}
					set(
						$current,
						"sign",
						lv_sign_2_0,
						"org.xtext.example.pascal.Pascal.sign");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getScale_factorAccess().getDigit_sequenceDigit_sequenceParserRuleCall_2_0());
				}
				lv_digit_sequence_3_0=ruledigit_sequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScale_factorRule());
					}
					set(
						$current,
						"digit_sequence",
						lv_digit_sequence_3_0,
						"org.xtext.example.pascal.Pascal.digit_sequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariable
entryRulevariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_rulevariable=rulevariable
	{ $current=$iv_rulevariable.current; }
	EOF;

// Rule variable
rulevariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getEntire_variableEntire_variableParserRuleCall_0_0());
				}
				lv_entire_variable_0_0=ruleentire_variable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"entire_variable",
						lv_entire_variable_0_0,
						"org.xtext.example.pascal.Pascal.entire_variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getExpression_listExpression_listParserRuleCall_1_1_0());
					}
					lv_expression_list_2_0=ruleexpression_list
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						add(
							$current,
							"expression_list",
							lv_expression_list_2_0,
							"org.xtext.example.pascal.Pascal.expression_list");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getRightSquareBracketKeyword_1_2());
			}
		)*
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getField_identifierIdentifierParserRuleCall_2_1_0());
					}
					lv_field_identifier_5_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						add(
							$current,
							"field_identifier",
							lv_field_identifier_5_0,
							"org.xtext.example.pascal.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_6='^'
			{
				newLeafNode(otherlv_6, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_3());
			}
		)*
		(
			otherlv_7='^'
			{
				newLeafNode(otherlv_7, grammarAccess.getVariableAccess().getCircumflexAccentKeyword_4());
			}
		)*
	)
;

// Entry rule entryRuleentire_variable
entryRuleentire_variable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntire_variableRule()); }
	iv_ruleentire_variable=ruleentire_variable
	{ $current=$iv_ruleentire_variable.current; }
	EOF;

// Rule entire_variable
ruleentire_variable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEntire_variableAccess().getIdentifierIdentifierParserRuleCall_0());
			}
			lv_identifier_0_0=ruleidentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEntire_variableRule());
				}
				set(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.xtext.example.pascal.Pascal.identifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleexpression_list
entryRuleexpression_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression_listRule()); }
	iv_ruleexpression_list=ruleexpression_list
	{ $current=$iv_ruleexpression_list.current; }
	EOF;

// Rule expression_list
ruleexpression_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpression_listRule());
					}
					add(
						$current,
						"expression",
						lv_expression_0_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExpression_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression_listAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression_listRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.example.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulelabel
entryRulelabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_rulelabel=rulelabel
	{ $current=$iv_rulelabel.current; }
	EOF;

// Rule label
rulelabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLabelAccess().getInteger_numberInteger_numberParserRuleCall_0());
			}
			lv_integer_number_0_0=ruleinteger_number
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLabelRule());
				}
				set(
					$current,
					"integer_number",
					lv_integer_number_0_0,
					"org.xtext.example.pascal.Pascal.integer_number");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleinteger_number
entryRuleinteger_number returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInteger_numberRule()); }
	iv_ruleinteger_number=ruleinteger_number
	{ $current=$iv_ruleinteger_number.current; }
	EOF;

// Rule integer_number
ruleinteger_number returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInteger_numberAccess().getDigit_sequenceDigit_sequenceParserRuleCall_0());
			}
			lv_digit_sequence_0_0=ruledigit_sequence
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getInteger_numberRule());
				}
				set(
					$current,
					"digit_sequence",
					lv_digit_sequence_0_0,
					"org.xtext.example.pascal.Pascal.digit_sequence");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuledigit_sequence
entryRuledigit_sequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDigit_sequenceRule()); }
	iv_ruledigit_sequence=ruledigit_sequence
	{ $current=$iv_ruledigit_sequence.current; }
	EOF;

// Rule digit_sequence
ruledigit_sequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDigit_sequenceAccess().getSignSignParserRuleCall_0_0());
				}
				lv_sign_0_0=rulesign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDigit_sequenceRule());
					}
					set(
						$current,
						"sign",
						lv_sign_0_0,
						"org.xtext.example.pascal.Pascal.sign");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDigit_sequenceAccess().getUnsigned_digit_sequenceUnsigned_digit_sequenceParserRuleCall_1_0());
				}
				lv_unsigned_digit_sequence_1_0=ruleunsigned_digit_sequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDigit_sequenceRule());
					}
					set(
						$current,
						"unsigned_digit_sequence",
						lv_unsigned_digit_sequence_1_0,
						"org.xtext.example.pascal.Pascal.unsigned_digit_sequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulesign
entryRulesign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	iv_rulesign=rulesign
	{ $current=$iv_rulesign.current.getText(); }
	EOF;

// Rule sign
rulesign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleunsigned_digit_sequence
entryRuleunsigned_digit_sequence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnsigned_digit_sequenceRule()); }
	iv_ruleunsigned_digit_sequence=ruleunsigned_digit_sequence
	{ $current=$iv_ruleunsigned_digit_sequence.current.getText(); }
	EOF;

// Rule unsigned_digit_sequence
ruleunsigned_digit_sequence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getUnsigned_digit_sequenceAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRulestructured_statement
entryRulestructured_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructured_statementRule()); }
	iv_rulestructured_statement=rulestructured_statement
	{ $current=$iv_rulestructured_statement.current; }
	EOF;

// Rule structured_statement
rulestructured_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStructured_statementAccess().getCompound_statementCompound_statementParserRuleCall_0_0());
				}
				lv_compound_statement_0_0=rulecompound_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructured_statementRule());
					}
					set(
						$current,
						"compound_statement",
						lv_compound_statement_0_0,
						"org.xtext.example.pascal.Pascal.compound_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructured_statementAccess().getRepetitive_statementRepetitive_statementParserRuleCall_1_0());
				}
				lv_repetitive_statement_1_0=rulerepetitive_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructured_statementRule());
					}
					set(
						$current,
						"repetitive_statement",
						lv_repetitive_statement_1_0,
						"org.xtext.example.pascal.Pascal.repetitive_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructured_statementAccess().getConditional_statementConditional_statementParserRuleCall_2_0());
				}
				lv_conditional_statement_2_0=ruleconditional_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructured_statementRule());
					}
					set(
						$current,
						"conditional_statement",
						lv_conditional_statement_2_0,
						"org.xtext.example.pascal.Pascal.conditional_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStructured_statementAccess().getWith_statementWith_statementParserRuleCall_3_0());
				}
				lv_with_statement_3_0=rulewith_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructured_statementRule());
					}
					set(
						$current,
						"with_statement",
						lv_with_statement_3_0,
						"org.xtext.example.pascal.Pascal.with_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulewith_statement
entryRulewith_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWith_statementRule()); }
	iv_rulewith_statement=rulewith_statement
	{ $current=$iv_rulewith_statement.current; }
	EOF;

// Rule with_statement
rulewith_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='with'
		{
			newLeafNode(otherlv_0, grammarAccess.getWith_statementAccess().getWithKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWith_statementAccess().getVariableVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=rulevariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWith_statementRule());
					}
					add(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtext.example.pascal.Pascal.variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getWith_statementAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWith_statementAccess().getVariableVariableParserRuleCall_2_1_0());
					}
					lv_variable_3_0=rulevariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWith_statementRule());
						}
						add(
							$current,
							"variable",
							lv_variable_3_0,
							"org.xtext.example.pascal.Pascal.variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getWith_statementAccess().getDoKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWith_statementAccess().getStatementStatementParserRuleCall_4_0());
				}
				lv_statement_5_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWith_statementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_5_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconditional_statement
entryRuleconditional_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditional_statementRule()); }
	iv_ruleconditional_statement=ruleconditional_statement
	{ $current=$iv_ruleconditional_statement.current; }
	EOF;

// Rule conditional_statement
ruleconditional_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditional_statementAccess().getIf_statementIf_statementParserRuleCall_0_0());
				}
				lv_if_statement_0_0=ruleif_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditional_statementRule());
					}
					set(
						$current,
						"if_statement",
						lv_if_statement_0_0,
						"org.xtext.example.pascal.Pascal.if_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConditional_statementAccess().getCase_statementCase_statementParserRuleCall_1_0());
				}
				lv_case_statement_1_0=rulecase_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditional_statementRule());
					}
					set(
						$current,
						"case_statement",
						lv_case_statement_1_0,
						"org.xtext.example.pascal.Pascal.case_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecase_statement
entryRulecase_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCase_statementRule()); }
	iv_rulecase_statement=rulecase_statement
	{ $current=$iv_rulecase_statement.current; }
	EOF;

// Rule case_statement
rulecase_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCase_statementAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_statementAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='of'
		{
			newLeafNode(otherlv_2, grammarAccess.getCase_statementAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_statementAccess().getCase_limbCase_limbParserRuleCall_3_0());
				}
				lv_case_limb_3_0=rulecase_limb
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_statementRule());
					}
					add(
						$current,
						"case_limb",
						lv_case_limb_3_0,
						"org.xtext.example.pascal.Pascal.case_limb");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getCase_statementAccess().getSemicolonKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCase_statementAccess().getCase_limbCase_limbParserRuleCall_4_1_0());
					}
					lv_case_limb_5_0=rulecase_limb
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCase_statementRule());
						}
						add(
							$current,
							"case_limb",
							lv_case_limb_5_0,
							"org.xtext.example.pascal.Pascal.case_limb");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getCase_statementAccess().getSemicolonKeyword_5());
			}
		)?
		otherlv_7='end'
		{
			newLeafNode(otherlv_7, grammarAccess.getCase_statementAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRulecase_limb
entryRulecase_limb returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCase_limbRule()); }
	iv_rulecase_limb=rulecase_limb
	{ $current=$iv_rulecase_limb.current; }
	EOF;

// Rule case_limb
rulecase_limb returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_limbAccess().getCase_label_listCase_label_listParserRuleCall_0_0());
				}
				lv_case_label_list_0_0=rulecase_label_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_limbRule());
					}
					set(
						$current,
						"case_label_list",
						lv_case_label_list_0_0,
						"org.xtext.example.pascal.Pascal.case_label_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCase_limbAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_limbAccess().getStatementStatementParserRuleCall_2_0());
				}
				lv_statement_2_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_limbRule());
					}
					set(
						$current,
						"statement",
						lv_statement_2_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecase_label_list
entryRulecase_label_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCase_label_listRule()); }
	iv_rulecase_label_list=rulecase_label_list
	{ $current=$iv_rulecase_label_list.current; }
	EOF;

// Rule case_label_list
rulecase_label_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantConstantParserRuleCall_0_0());
				}
				lv_constant_0_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCase_label_listRule());
					}
					add(
						$current,
						"constant",
						lv_constant_0_0,
						"org.xtext.example.pascal.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getCase_label_listAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCase_label_listAccess().getConstantConstantParserRuleCall_1_1_0());
					}
					lv_constant_2_0=ruleconstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCase_label_listRule());
						}
						add(
							$current,
							"constant",
							lv_constant_2_0,
							"org.xtext.example.pascal.Pascal.constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleif_statement
entryRuleif_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIf_statementRule()); }
	iv_ruleif_statement=ruleif_statement
	{ $current=$iv_ruleif_statement.current; }
	EOF;

// Rule if_statement
ruleif_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIf_statementAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIf_statementAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIf_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getIf_statementAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIf_statementAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIf_statementRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getIf_statementAccess().getElseKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIf_statementAccess().getStatementStatementParserRuleCall_4_1_0());
					}
					lv_statement_5_0=rulestatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIf_statementRule());
						}
						add(
							$current,
							"statement",
							lv_statement_5_0,
							"org.xtext.example.pascal.Pascal.statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulerepetitive_statement
entryRulerepetitive_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepetitive_statementRule()); }
	iv_rulerepetitive_statement=rulerepetitive_statement
	{ $current=$iv_rulerepetitive_statement.current; }
	EOF;

// Rule repetitive_statement
rulerepetitive_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRepetitive_statementAccess().getWhile_statementWhile_statementParserRuleCall_0_0());
				}
				lv_while_statement_0_0=rulewhile_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepetitive_statementRule());
					}
					set(
						$current,
						"while_statement",
						lv_while_statement_0_0,
						"org.xtext.example.pascal.Pascal.while_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRepetitive_statementAccess().getRepeat_statementRepeat_statementParserRuleCall_1_0());
				}
				lv_repeat_statement_1_0=rulerepeat_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepetitive_statementRule());
					}
					set(
						$current,
						"repeat_statement",
						lv_repeat_statement_1_0,
						"org.xtext.example.pascal.Pascal.repeat_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getRepetitive_statementAccess().getFor_statementFor_statementParserRuleCall_2_0());
				}
				lv_for_statement_2_0=rulefor_statement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepetitive_statementRule());
					}
					set(
						$current,
						"for_statement",
						lv_for_statement_2_0,
						"org.xtext.example.pascal.Pascal.for_statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefor_statement
entryRulefor_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFor_statementRule()); }
	iv_rulefor_statement=rulefor_statement
	{ $current=$iv_rulefor_statement.current; }
	EOF;

// Rule for_statement
rulefor_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getFor_statementAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_statementAccess().getVariable_identifierIdentifierParserRuleCall_1_0());
				}
				lv_variable_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_statementRule());
					}
					set(
						$current,
						"variable_identifier",
						lv_variable_identifier_1_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getFor_statementAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_statementAccess().getInitial_expressionInitial_expressionParserRuleCall_3_0());
				}
				lv_initial_expression_3_0=ruleinitial_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_statementRule());
					}
					set(
						$current,
						"initial_expression",
						lv_initial_expression_3_0,
						"org.xtext.example.pascal.Pascal.initial_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='to'
			{
				newLeafNode(otherlv_4, grammarAccess.getFor_statementAccess().getToKeyword_4_0());
			}
			    |
			otherlv_5='downto'
			{
				newLeafNode(otherlv_5, grammarAccess.getFor_statementAccess().getDowntoKeyword_4_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_statementAccess().getFinal_expressionFinal_expressionParserRuleCall_5_0());
				}
				lv_final_expression_6_0=rulefinal_expression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_statementRule());
					}
					set(
						$current,
						"final_expression",
						lv_final_expression_6_0,
						"org.xtext.example.pascal.Pascal.final_expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='do'
		{
			newLeafNode(otherlv_7, grammarAccess.getFor_statementAccess().getDoKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFor_statementAccess().getStatementStatementParserRuleCall_7_0());
				}
				lv_statement_8_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFor_statementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_8_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefinal_expression
entryRulefinal_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFinal_expressionRule()); }
	iv_rulefinal_expression=rulefinal_expression
	{ $current=$iv_rulefinal_expression.current; }
	EOF;

// Rule final_expression
rulefinal_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFinal_expressionAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFinal_expressionRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.xtext.example.pascal.Pascal.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleinitial_expression
entryRuleinitial_expression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitial_expressionRule()); }
	iv_ruleinitial_expression=ruleinitial_expression
	{ $current=$iv_ruleinitial_expression.current; }
	EOF;

// Rule initial_expression
ruleinitial_expression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getInitial_expressionAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleexpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getInitial_expressionRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.xtext.example.pascal.Pascal.expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulerepeat_statement
entryRulerepeat_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeat_statementRule()); }
	iv_rulerepeat_statement=rulerepeat_statement
	{ $current=$iv_rulerepeat_statement.current; }
	EOF;

// Rule repeat_statement
rulerepeat_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeat_statementAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeat_statementAccess().getStatement_sequenceStatement_sequenceParserRuleCall_1_0());
				}
				lv_statement_sequence_1_0=rulestatement_sequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeat_statementRule());
					}
					set(
						$current,
						"statement_sequence",
						lv_statement_sequence_1_0,
						"org.xtext.example.pascal.Pascal.statement_sequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='until'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeat_statementAccess().getUntilKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeat_statementAccess().getExpressionExpressionParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeat_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhile_statementRule()); }
	iv_rulewhile_statement=rulewhile_statement
	{ $current=$iv_rulewhile_statement.current; }
	EOF;

// Rule while_statement
rulewhile_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhile_statementAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhile_statementAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhile_statementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.pascal.Pascal.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='do'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhile_statementAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhile_statementAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=rulestatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhile_statementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_3_0,
						"org.xtext.example.pascal.Pascal.statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecompound_statement
entryRulecompound_statement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompound_statementRule()); }
	iv_rulecompound_statement=rulecompound_statement
	{ $current=$iv_rulecompound_statement.current; }
	EOF;

// Rule compound_statement
rulecompound_statement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='begin'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompound_statementAccess().getBeginKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCompound_statementAccess().getStatement_sequenceStatement_sequenceParserRuleCall_1_0());
				}
				lv_statement_sequence_1_0=rulestatement_sequence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompound_statementRule());
					}
					set(
						$current,
						"statement_sequence",
						lv_statement_sequence_1_0,
						"org.xtext.example.pascal.Pascal.statement_sequence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getCompound_statementAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRuledeclaration_part
entryRuledeclaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaration_partRule()); }
	iv_ruledeclaration_part=ruledeclaration_part
	{ $current=$iv_ruledeclaration_part.current; }
	EOF;

// Rule declaration_part
ruledeclaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclaration_partAccess().getDeclaration_partAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_partAccess().getLabel_declaration_partLabel_declaration_partParserRuleCall_1_0());
				}
				lv_label_declaration_part_1_0=rulelabel_declaration_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
					}
					set(
						$current,
						"label_declaration_part",
						lv_label_declaration_part_1_0,
						"org.xtext.example.pascal.Pascal.label_declaration_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_partAccess().getConstant_definition_partConstant_definition_partParserRuleCall_2_0());
				}
				lv_constant_definition_part_2_0=ruleconstant_definition_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
					}
					set(
						$current,
						"constant_definition_part",
						lv_constant_definition_part_2_0,
						"org.xtext.example.pascal.Pascal.constant_definition_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_partAccess().getType_definition_partType_definition_partParserRuleCall_3_0());
				}
				lv_type_definition_part_3_0=ruletype_definition_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
					}
					set(
						$current,
						"type_definition_part",
						lv_type_definition_part_3_0,
						"org.xtext.example.pascal.Pascal.type_definition_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaration_partAccess().getVariable_declaration_partVariable_declaration_partParserRuleCall_4_0());
				}
				lv_variable_declaration_part_4_0=rulevariable_declaration_part
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
					}
					set(
						$current,
						"variable_declaration_part",
						lv_variable_declaration_part_4_0,
						"org.xtext.example.pascal.Pascal.variable_declaration_part");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_headingProcedure_headingParserRuleCall_5_0_0_0_0());
							}
							lv_procedure_heading_5_0=ruleprocedure_heading
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"procedure_heading",
									lv_procedure_heading_5_0,
									"org.xtext.example.pascal.Pascal.procedure_heading");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=';'
					{
						newLeafNode(otherlv_6, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_0_0_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_bodyProcedure_bodyParserRuleCall_5_0_0_2_0());
							}
							lv_procedure_body_7_0=ruleprocedure_body
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"procedure_body",
									lv_procedure_body_7_0,
									"org.xtext.example.pascal.Pascal.procedure_body");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_headingProcedure_headingParserRuleCall_5_0_1_0_0());
							}
							lv_procedure_heading_8_0=ruleprocedure_heading
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"procedure_heading",
									lv_procedure_heading_8_0,
									"org.xtext.example.pascal.Pascal.procedure_heading");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_9=';'
					{
						newLeafNode(otherlv_9, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_0_1_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getDirectiveDirectiveParserRuleCall_5_0_1_2_0());
							}
							lv_directive_10_0=ruledirective
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"directive",
									lv_directive_10_0,
									"org.xtext.example.pascal.Pascal.directive");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_identificationProcedure_identificationParserRuleCall_5_0_2_0_0());
							}
							lv_procedure_identification_11_0=ruleprocedure_identification
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"procedure_identification",
									lv_procedure_identification_11_0,
									"org.xtext.example.pascal.Pascal.procedure_identification");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_12=';'
					{
						newLeafNode(otherlv_12, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_0_2_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getProcedure_bodyProcedure_bodyParserRuleCall_5_0_2_2_0());
							}
							lv_procedure_body_13_0=ruleprocedure_body
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"procedure_body",
									lv_procedure_body_13_0,
									"org.xtext.example.pascal.Pascal.procedure_body");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getFunction_headingFunction_headingParserRuleCall_5_0_3_0_0());
							}
							lv_function_heading_14_0=rulefunction_heading
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"function_heading",
									lv_function_heading_14_0,
									"org.xtext.example.pascal.Pascal.function_heading");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_15=';'
					{
						newLeafNode(otherlv_15, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_0_3_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getFunction_bodyFunction_bodyParserRuleCall_5_0_3_2_0());
							}
							lv_function_body_16_0=rulefunction_body
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"function_body",
									lv_function_body_16_0,
									"org.xtext.example.pascal.Pascal.function_body");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getFunction_headingFunction_headingParserRuleCall_5_0_4_0_0());
							}
							lv_function_heading_17_0=rulefunction_heading
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"function_heading",
									lv_function_heading_17_0,
									"org.xtext.example.pascal.Pascal.function_heading");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_18=';'
					{
						newLeafNode(otherlv_18, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_0_4_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getDirectiveDirectiveParserRuleCall_5_0_4_2_0());
							}
							lv_directive_19_0=ruledirective
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"directive",
									lv_directive_19_0,
									"org.xtext.example.pascal.Pascal.directive");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getFunction_identificationFunction_identificationParserRuleCall_5_0_5_0_0());
							}
							lv_function_identification_20_0=rulefunction_identification
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"function_identification",
									lv_function_identification_20_0,
									"org.xtext.example.pascal.Pascal.function_identification");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_21=';'
					{
						newLeafNode(otherlv_21, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_0_5_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getDeclaration_partAccess().getFunction_bodyFunction_bodyParserRuleCall_5_0_5_2_0());
							}
							lv_function_body_22_0=rulefunction_body
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getDeclaration_partRule());
								}
								add(
									$current,
									"function_body",
									lv_function_body_22_0,
									"org.xtext.example.pascal.Pascal.function_body");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			otherlv_23=';'
			{
				newLeafNode(otherlv_23, grammarAccess.getDeclaration_partAccess().getSemicolonKeyword_5_1());
			}
		)*
	)
;

// Entry rule entryRulelabel_declaration_part
entryRulelabel_declaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabel_declaration_partRule()); }
	iv_rulelabel_declaration_part=rulelabel_declaration_part
	{ $current=$iv_rulelabel_declaration_part.current; }
	EOF;

// Rule label_declaration_part
rulelabel_declaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='label'
		{
			newLeafNode(otherlv_0, grammarAccess.getLabel_declaration_partAccess().getLabelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelLabelParserRuleCall_1_0());
				}
				lv_label_1_0=rulelabel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabel_declaration_partRule());
					}
					add(
						$current,
						"label",
						lv_label_1_0,
						"org.xtext.example.pascal.Pascal.label");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getLabel_declaration_partAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLabel_declaration_partAccess().getLabelLabelParserRuleCall_2_1_0());
					}
					lv_label_3_0=rulelabel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLabel_declaration_partRule());
						}
						add(
							$current,
							"label",
							lv_label_3_0,
							"org.xtext.example.pascal.Pascal.label");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getLabel_declaration_partAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleconstant_definition_part
entryRuleconstant_definition_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_definition_partRule()); }
	iv_ruleconstant_definition_part=ruleconstant_definition_part
	{ $current=$iv_ruleconstant_definition_part.current; }
	EOF;

// Rule constant_definition_part
ruleconstant_definition_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstant_definition_partAccess().getConstKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionConstant_definitionParserRuleCall_1_0());
				}
				lv_constant_definition_1_0=ruleconstant_definition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstant_definition_partRule());
					}
					add(
						$current,
						"constant_definition",
						lv_constant_definition_1_0,
						"org.xtext.example.pascal.Pascal.constant_definition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_definition_partAccess().getConstant_definitionConstant_definitionParserRuleCall_3_0_0());
					}
					lv_constant_definition_3_0=ruleconstant_definition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_definition_partRule());
						}
						add(
							$current,
							"constant_definition",
							lv_constant_definition_3_0,
							"org.xtext.example.pascal.Pascal.constant_definition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getConstant_definition_partAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRuleconstant_definition
entryRuleconstant_definition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_definitionRule()); }
	iv_ruleconstant_definition=ruleconstant_definition
	{ $current=$iv_ruleconstant_definition.current; }
	EOF;

// Rule constant_definition
ruleconstant_definition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstant_definitionAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstant_definitionRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getConstant_definitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstant_definitionAccess().getConstantConstantParserRuleCall_2_0());
				}
				lv_constant_2_0=ruleconstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstant_definitionRule());
					}
					set(
						$current,
						"constant",
						lv_constant_2_0,
						"org.xtext.example.pascal.Pascal.constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleconstant=ruleconstant
	{ $current=$iv_ruleconstant.current; }
	EOF;

// Rule constant
ruleconstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantAccess().getSignSignParserRuleCall_0_0_0());
					}
					lv_sign_0_0=rulesign
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantRule());
						}
						set(
							$current,
							"sign",
							lv_sign_0_0,
							"org.xtext.example.pascal.Pascal.sign");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getConstantAccess().getConstant_identifierIdentifierParserRuleCall_0_1_0_0());
						}
						lv_constant_identifier_1_0=ruleidentifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstantRule());
							}
							set(
								$current,
								"constant_identifier",
								lv_constant_identifier_1_0,
								"org.xtext.example.pascal.Pascal.identifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getConstantAccess().getNumberNumberParserRuleCall_0_1_1_0());
						}
						lv_number_2_0=rulenumber
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getConstantRule());
							}
							set(
								$current,
								"number",
								lv_number_2_0,
								"org.xtext.example.pascal.Pascal.number");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				lv_strings_3_0=RULE_STRINGS
				{
					newLeafNode(lv_strings_3_0, grammarAccess.getConstantAccess().getStringsStringsTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstantRule());
					}
					setWithLastConsumed(
						$current,
						"strings",
						lv_strings_3_0,
						"org.xtext.example.pascal.Pascal.strings");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getBooleanBooleanParserRuleCall_2_0());
				}
				lv_boolean_4_0=ruleboolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"boolean",
						lv_boolean_4_0,
						"org.xtext.example.pascal.Pascal.boolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype_definition_part
entryRuletype_definition_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_definition_partRule()); }
	iv_ruletype_definition_part=ruletype_definition_part
	{ $current=$iv_ruletype_definition_part.current; }
	EOF;

// Rule type_definition_part
ruletype_definition_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getType_definition_partAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionType_definitionParserRuleCall_1_0());
				}
				lv_type_definition_1_0=ruletype_definition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getType_definition_partRule());
					}
					add(
						$current,
						"type_definition",
						lv_type_definition_1_0,
						"org.xtext.example.pascal.Pascal.type_definition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getType_definition_partAccess().getType_definitionType_definitionParserRuleCall_3_0_0());
					}
					lv_type_definition_3_0=ruletype_definition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getType_definition_partRule());
						}
						add(
							$current,
							"type_definition",
							lv_type_definition_3_0,
							"org.xtext.example.pascal.Pascal.type_definition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getType_definition_partAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRuletype_definition
entryRuletype_definition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_definitionRule()); }
	iv_ruletype_definition=ruletype_definition
	{ $current=$iv_ruletype_definition.current; }
	EOF;

// Rule type_definition
ruletype_definition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getType_definitionAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getType_definitionRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getType_definitionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getType_definitionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getType_definitionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype
entryRuletype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current; }
	EOF;

// Rule type
ruletype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getSimple_typeSimple_typeParserRuleCall_0_0());
				}
				lv_simple_type_0_0=rulesimple_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"simple_type",
						lv_simple_type_0_0,
						"org.xtext.example.pascal.Pascal.simple_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getStructured_typeStructured_typeParserRuleCall_1_0());
				}
				lv_structured_type_1_0=rulestructured_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"structured_type",
						lv_structured_type_1_0,
						"org.xtext.example.pascal.Pascal.structured_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getPointer_typePointer_typeParserRuleCall_2_0());
				}
				lv_pointer_type_2_0=rulepointer_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"pointer_type",
						lv_pointer_type_2_0,
						"org.xtext.example.pascal.Pascal.pointer_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getType_identifierType_identifierParserRuleCall_3_0());
				}
				lv_type_identifier_3_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"type_identifier",
						lv_type_identifier_3_0,
						"org.xtext.example.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletype_identifier
entryRuletype_identifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getType_identifierRule()); }
	iv_ruletype_identifier=ruletype_identifier
	{ $current=$iv_ruletype_identifier.current; }
	EOF;

// Rule type_identifier
ruletype_identifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getType_identifierAccess().getIdentifierIdentifierParserRuleCall_0());
			}
			lv_identifier_0_0=ruleidentifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getType_identifierRule());
				}
				set(
					$current,
					"identifier",
					lv_identifier_0_0,
					"org.xtext.example.pascal.Pascal.identifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulepointer_type
entryRulepointer_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointer_typeRule()); }
	iv_rulepointer_type=rulepointer_type
	{ $current=$iv_rulepointer_type.current; }
	EOF;

// Rule pointer_type
rulepointer_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='^'
		{
			newLeafNode(otherlv_0, grammarAccess.getPointer_typeAccess().getCircumflexAccentKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPointer_typeAccess().getType_identifierType_identifierParserRuleCall_1_0());
				}
				lv_type_identifier_1_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPointer_typeRule());
					}
					set(
						$current,
						"type_identifier",
						lv_type_identifier_1_0,
						"org.xtext.example.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulestructured_type
entryRulestructured_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructured_typeRule()); }
	iv_rulestructured_type=rulestructured_type
	{ $current=$iv_rulestructured_type.current; }
	EOF;

// Rule structured_type
rulestructured_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='packed'
			{
				newLeafNode(otherlv_0, grammarAccess.getStructured_typeAccess().getPackedKeyword_0());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStructured_typeAccess().getUnpacked_structured_typeUnpacked_structured_typeParserRuleCall_1_0());
				}
				lv_unpacked_structured_type_1_0=ruleunpacked_structured_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructured_typeRule());
					}
					set(
						$current,
						"unpacked_structured_type",
						lv_unpacked_structured_type_1_0,
						"org.xtext.example.pascal.Pascal.unpacked_structured_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunpacked_structured_type
entryRuleunpacked_structured_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnpacked_structured_typeRule()); }
	iv_ruleunpacked_structured_type=ruleunpacked_structured_type
	{ $current=$iv_ruleunpacked_structured_type.current; }
	EOF;

// Rule unpacked_structured_type
ruleunpacked_structured_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getArray_typeArray_typeParserRuleCall_0_0());
				}
				lv_array_type_0_0=rulearray_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnpacked_structured_typeRule());
					}
					set(
						$current,
						"array_type",
						lv_array_type_0_0,
						"org.xtext.example.pascal.Pascal.array_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getRecord_typeRecord_typeParserRuleCall_1_0());
				}
				lv_record_type_1_0=rulerecord_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnpacked_structured_typeRule());
					}
					set(
						$current,
						"record_type",
						lv_record_type_1_0,
						"org.xtext.example.pascal.Pascal.record_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getSet_typeSet_typeParserRuleCall_2_0());
				}
				lv_set_type_2_0=ruleset_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnpacked_structured_typeRule());
					}
					set(
						$current,
						"set_type",
						lv_set_type_2_0,
						"org.xtext.example.pascal.Pascal.set_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getUnpacked_structured_typeAccess().getFile_typeFile_typeParserRuleCall_3_0());
				}
				lv_file_type_3_0=rulefile_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnpacked_structured_typeRule());
					}
					set(
						$current,
						"file_type",
						lv_file_type_3_0,
						"org.xtext.example.pascal.Pascal.file_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefile_type
entryRulefile_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFile_typeRule()); }
	iv_rulefile_type=rulefile_type
	{ $current=$iv_rulefile_type.current; }
	EOF;

// Rule file_type
rulefile_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='file'
		{
			newLeafNode(otherlv_0, grammarAccess.getFile_typeAccess().getFileKeyword_0());
		}
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getFile_typeAccess().getOfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFile_typeAccess().getFile_component_typeFile_component_typeParserRuleCall_2_0());
				}
				lv_file_component_type_2_0=rulefile_component_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFile_typeRule());
					}
					set(
						$current,
						"file_component_type",
						lv_file_component_type_2_0,
						"org.xtext.example.pascal.Pascal.file_component_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefile_component_type
entryRulefile_component_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFile_component_typeRule()); }
	iv_rulefile_component_type=rulefile_component_type
	{ $current=$iv_rulefile_component_type.current; }
	EOF;

// Rule file_component_type
rulefile_component_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFile_component_typeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_type_0_0=ruletype
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFile_component_typeRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.example.pascal.Pascal.type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleset_type
entryRuleset_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSet_typeRule()); }
	iv_ruleset_type=ruleset_type
	{ $current=$iv_ruleset_type.current; }
	EOF;

// Rule set_type
ruleset_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSet_typeAccess().getSetKeyword_0());
		}
		otherlv_1='of'
		{
			newLeafNode(otherlv_1, grammarAccess.getSet_typeAccess().getOfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSet_typeAccess().getBase_typeBase_typeParserRuleCall_2_0());
				}
				lv_base_type_2_0=rulebase_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSet_typeRule());
					}
					set(
						$current,
						"base_type",
						lv_base_type_2_0,
						"org.xtext.example.pascal.Pascal.base_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulebase_type
entryRulebase_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBase_typeRule()); }
	iv_rulebase_type=rulebase_type
	{ $current=$iv_rulebase_type.current; }
	EOF;

// Rule base_type
rulebase_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBase_typeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_type_0_0=ruletype
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBase_typeRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.example.pascal.Pascal.type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulerecord_type
entryRulerecord_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecord_typeRule()); }
	iv_rulerecord_type=rulerecord_type
	{ $current=$iv_rulerecord_type.current; }
	EOF;

// Rule record_type
rulerecord_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='record'
		{
			newLeafNode(otherlv_0, grammarAccess.getRecord_typeAccess().getRecordKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecord_typeAccess().getField_listField_listParserRuleCall_1_0());
				}
				lv_field_list_1_0=rulefield_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecord_typeRule());
					}
					set(
						$current,
						"field_list",
						lv_field_list_1_0,
						"org.xtext.example.pascal.Pascal.field_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='end'
		{
			newLeafNode(otherlv_2, grammarAccess.getRecord_typeAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRulefield_list
entryRulefield_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getField_listRule()); }
	iv_rulefield_list=rulefield_list
	{ $current=$iv_rulefield_list.current; }
	EOF;

// Rule field_list
rulefield_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getField_listAccess().getField_listAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getField_listAccess().getFixed_partFixed_partParserRuleCall_1_0_0_0_0());
							}
							lv_fixed_part_1_0=rulefixed_part
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getField_listRule());
								}
								set(
									$current,
									"fixed_part",
									lv_fixed_part_1_0,
									"org.xtext.example.pascal.Pascal.fixed_part");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_2=';'
						{
							newLeafNode(otherlv_2, grammarAccess.getField_listAccess().getSemicolonKeyword_1_0_0_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getField_listAccess().getVariant_partVariant_partParserRuleCall_1_0_0_1_1_0());
								}
								lv_variant_part_3_0=rulevariant_part
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getField_listRule());
									}
									set(
										$current,
										"variant_part",
										lv_variant_part_3_0,
										"org.xtext.example.pascal.Pascal.variant_part");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getField_listAccess().getVariant_partVariant_partParserRuleCall_1_0_1_0());
						}
						lv_variant_part_4_0=rulevariant_part
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getField_listRule());
							}
							set(
								$current,
								"variant_part",
								lv_variant_part_4_0,
								"org.xtext.example.pascal.Pascal.variant_part");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_5=';'
				{
					newLeafNode(otherlv_5, grammarAccess.getField_listAccess().getSemicolonKeyword_1_1());
				}
			)?
		)?
	)
;

// Entry rule entryRulefixed_part
entryRulefixed_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixed_partRule()); }
	iv_rulefixed_part=rulefixed_part
	{ $current=$iv_rulefixed_part.current; }
	EOF;

// Rule fixed_part
rulefixed_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFixed_partAccess().getRecord_sectionRecord_sectionParserRuleCall_0_0());
				}
				lv_record_section_0_0=rulerecord_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFixed_partRule());
					}
					add(
						$current,
						"record_section",
						lv_record_section_0_0,
						"org.xtext.example.pascal.Pascal.record_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getFixed_partAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFixed_partAccess().getRecord_sectionRecord_sectionParserRuleCall_1_1_0());
					}
					lv_record_section_2_0=rulerecord_section
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFixed_partRule());
						}
						add(
							$current,
							"record_section",
							lv_record_section_2_0,
							"org.xtext.example.pascal.Pascal.record_section");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulerecord_section
entryRulerecord_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecord_sectionRule()); }
	iv_rulerecord_section=rulerecord_section
	{ $current=$iv_rulerecord_section.current; }
	EOF;

// Rule record_section
rulerecord_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecord_sectionAccess().getIdentifier_listIdentifier_listParserRuleCall_0_0());
				}
				lv_identifier_list_0_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecord_sectionRule());
					}
					set(
						$current,
						"identifier_list",
						lv_identifier_list_0_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getRecord_sectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRecord_sectionAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRecord_sectionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevariant_part
entryRulevariant_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariant_partRule()); }
	iv_rulevariant_part=rulevariant_part
	{ $current=$iv_rulevariant_part.current; }
	EOF;

// Rule variant_part
rulevariant_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariant_partAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariant_partAccess().getTag_fieldTag_fieldParserRuleCall_1_0());
				}
				lv_tag_field_1_0=ruletag_field
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariant_partRule());
					}
					set(
						$current,
						"tag_field",
						lv_tag_field_1_0,
						"org.xtext.example.pascal.Pascal.tag_field");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariant_partAccess().getType_identifierType_identifierParserRuleCall_2_0());
				}
				lv_type_identifier_2_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariant_partRule());
					}
					set(
						$current,
						"type_identifier",
						lv_type_identifier_2_0,
						"org.xtext.example.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='of'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariant_partAccess().getOfKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariant_partAccess().getVariantVariantParserRuleCall_4_0());
				}
				lv_variant_4_0=rulevariant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariant_partRule());
					}
					add(
						$current,
						"variant",
						lv_variant_4_0,
						"org.xtext.example.pascal.Pascal.variant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getVariant_partAccess().getSemicolonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariant_partAccess().getVariantVariantParserRuleCall_5_1_0());
					}
					lv_variant_6_0=rulevariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariant_partRule());
						}
						add(
							$current,
							"variant",
							lv_variant_6_0,
							"org.xtext.example.pascal.Pascal.variant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulevariant
entryRulevariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantRule()); }
	iv_rulevariant=rulevariant
	{ $current=$iv_rulevariant.current; }
	EOF;

// Rule variant
rulevariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getCase_label_listCase_label_listParserRuleCall_0_0());
				}
				lv_case_label_list_0_0=rulecase_label_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"case_label_list",
						lv_case_label_list_0_0,
						"org.xtext.example.pascal.Pascal.case_label_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariantAccess().getColonKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getField_listField_listParserRuleCall_3_0());
				}
				lv_field_list_3_0=rulefield_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"field_list",
						lv_field_list_3_0,
						"org.xtext.example.pascal.Pascal.field_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariantAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuletag_field
entryRuletag_field returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTag_fieldRule()); }
	iv_ruletag_field=ruletag_field
	{ $current=$iv_ruletag_field.current; }
	EOF;

// Rule tag_field
ruletag_field returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTag_fieldAccess().getTag_fieldAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTag_fieldAccess().getIdentifierIdentifierParserRuleCall_1_0_0());
					}
					lv_identifier_1_0=ruleidentifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTag_fieldRule());
						}
						set(
							$current,
							"identifier",
							lv_identifier_1_0,
							"org.xtext.example.pascal.Pascal.identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getTag_fieldAccess().getColonKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRulearray_type
entryRulearray_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArray_typeRule()); }
	iv_rulearray_type=rulearray_type
	{ $current=$iv_rulearray_type.current; }
	EOF;

// Rule array_type
rulearray_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='array'
		{
			newLeafNode(otherlv_0, grammarAccess.getArray_typeAccess().getArrayKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArray_typeAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArray_typeAccess().getIndex_typeIndex_typeParserRuleCall_2_0());
				}
				lv_index_type_2_0=ruleindex_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArray_typeRule());
					}
					add(
						$current,
						"index_type",
						lv_index_type_2_0,
						"org.xtext.example.pascal.Pascal.index_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getArray_typeAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArray_typeAccess().getIndex_typeIndex_typeParserRuleCall_3_1_0());
					}
					lv_index_type_4_0=ruleindex_type
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArray_typeRule());
						}
						add(
							$current,
							"index_type",
							lv_index_type_4_0,
							"org.xtext.example.pascal.Pascal.index_type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getArray_typeAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_6='of'
		{
			newLeafNode(otherlv_6, grammarAccess.getArray_typeAccess().getOfKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArray_typeAccess().getElement_typeElement_typeParserRuleCall_6_0());
				}
				lv_element_type_7_0=ruleelement_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArray_typeRule());
					}
					set(
						$current,
						"element_type",
						lv_element_type_7_0,
						"org.xtext.example.pascal.Pascal.element_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleelement_type
entryRuleelement_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElement_typeRule()); }
	iv_ruleelement_type=ruleelement_type
	{ $current=$iv_ruleelement_type.current; }
	EOF;

// Rule element_type
ruleelement_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElement_typeAccess().getTypeTypeParserRuleCall_0());
			}
			lv_type_0_0=ruletype
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElement_typeRule());
				}
				set(
					$current,
					"type",
					lv_type_0_0,
					"org.xtext.example.pascal.Pascal.type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleindex_type
entryRuleindex_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndex_typeRule()); }
	iv_ruleindex_type=ruleindex_type
	{ $current=$iv_ruleindex_type.current; }
	EOF;

// Rule index_type
ruleindex_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getIndex_typeAccess().getSimple_typeSimple_typeParserRuleCall_0());
			}
			lv_simple_type_0_0=rulesimple_type
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getIndex_typeRule());
				}
				set(
					$current,
					"simple_type",
					lv_simple_type_0_0,
					"org.xtext.example.pascal.Pascal.simple_type");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulesimple_type
entryRulesimple_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimple_typeRule()); }
	iv_rulesimple_type=rulesimple_type
	{ $current=$iv_rulesimple_type.current; }
	EOF;

// Rule simple_type
rulesimple_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getSubrange_typeSubrange_typeParserRuleCall_0_0());
				}
				lv_subrange_type_0_0=rulesubrange_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					set(
						$current,
						"subrange_type",
						lv_subrange_type_0_0,
						"org.xtext.example.pascal.Pascal.subrange_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSimple_typeAccess().getEnumerated_typeEnumerated_typeParserRuleCall_1_0());
				}
				lv_enumerated_type_1_0=ruleenumerated_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimple_typeRule());
					}
					set(
						$current,
						"enumerated_type",
						lv_enumerated_type_1_0,
						"org.xtext.example.pascal.Pascal.enumerated_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleenumerated_type
entryRuleenumerated_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerated_typeRule()); }
	iv_ruleenumerated_type=ruleenumerated_type
	{ $current=$iv_ruleenumerated_type.current; }
	EOF;

// Rule enumerated_type
ruleenumerated_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumerated_typeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumerated_typeAccess().getIdentifier_listIdentifier_listParserRuleCall_1_0());
				}
				lv_identifier_list_1_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumerated_typeRule());
					}
					set(
						$current,
						"identifier_list",
						lv_identifier_list_1_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumerated_typeAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulesubrange_type
entryRulesubrange_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubrange_typeRule()); }
	iv_rulesubrange_type=rulesubrange_type
	{ $current=$iv_rulesubrange_type.current; }
	EOF;

// Rule subrange_type
rulesubrange_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrange_typeAccess().getLower_boundLower_boundParserRuleCall_0_0());
				}
				lv_lower_bound_0_0=rulelower_bound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
					}
					set(
						$current,
						"lower_bound",
						lv_lower_bound_0_0,
						"org.xtext.example.pascal.Pascal.lower_bound");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubrange_typeAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubrange_typeAccess().getUpper_boundUpper_boundParserRuleCall_2_0());
				}
				lv_upper_bound_2_0=ruleupper_bound
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubrange_typeRule());
					}
					set(
						$current,
						"upper_bound",
						lv_upper_bound_2_0,
						"org.xtext.example.pascal.Pascal.upper_bound");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulelower_bound
entryRulelower_bound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLower_boundRule()); }
	iv_rulelower_bound=rulelower_bound
	{ $current=$iv_rulelower_bound.current; }
	EOF;

// Rule lower_bound
rulelower_bound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLower_boundAccess().getConstantConstantParserRuleCall_0());
			}
			lv_constant_0_0=ruleconstant
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLower_boundRule());
				}
				set(
					$current,
					"constant",
					lv_constant_0_0,
					"org.xtext.example.pascal.Pascal.constant");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleupper_bound
entryRuleupper_bound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpper_boundRule()); }
	iv_ruleupper_bound=ruleupper_bound
	{ $current=$iv_ruleupper_bound.current; }
	EOF;

// Rule upper_bound
ruleupper_bound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUpper_boundAccess().getConstantConstantParserRuleCall_0());
			}
			lv_constant_0_0=ruleconstant
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUpper_boundRule());
				}
				set(
					$current,
					"constant",
					lv_constant_0_0,
					"org.xtext.example.pascal.Pascal.constant");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulevariable_declaration_part
entryRulevariable_declaration_part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_declaration_partRule()); }
	iv_rulevariable_declaration_part=rulevariable_declaration_part
	{ $current=$iv_rulevariable_declaration_part.current; }
	EOF;

// Rule variable_declaration_part
rulevariable_declaration_part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariable_declaration_partAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariable_declarationVariable_declarationParserRuleCall_1_0());
				}
				lv_variable_declaration_1_0=rulevariable_declaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_declaration_partRule());
					}
					add(
						$current,
						"variable_declaration",
						lv_variable_declaration_1_0,
						"org.xtext.example.pascal.Pascal.variable_declaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariable_declaration_partAccess().getVariable_declarationVariable_declarationParserRuleCall_3_0_0());
					}
					lv_variable_declaration_3_0=rulevariable_declaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariable_declaration_partRule());
						}
						add(
							$current,
							"variable_declaration",
							lv_variable_declaration_3_0,
							"org.xtext.example.pascal.Pascal.variable_declaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getVariable_declaration_partAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRulevariable_declaration
entryRulevariable_declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); }
	iv_rulevariable_declaration=rulevariable_declaration
	{ $current=$iv_rulevariable_declaration.current; }
	EOF;

// Rule variable_declaration
rulevariable_declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_declarationAccess().getIdentifier_listIdentifier_listParserRuleCall_0_0());
				}
				lv_identifier_list_0_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
					}
					set(
						$current,
						"identifier_list",
						lv_identifier_list_0_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariable_declarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.example.pascal.Pascal.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunction_identification
entryRulefunction_identification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_identificationRule()); }
	iv_rulefunction_identification=rulefunction_identification
	{ $current=$iv_rulefunction_identification.current; }
	EOF;

// Rule function_identification
rulefunction_identification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunction_identificationAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_identificationAccess().getFunction_identifierIdentifierParserRuleCall_1_0());
				}
				lv_function_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_identificationRule());
					}
					set(
						$current,
						"function_identifier",
						lv_function_identifier_1_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunction_body
entryRulefunction_body returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_bodyRule()); }
	iv_rulefunction_body=rulefunction_body
	{ $current=$iv_rulefunction_body.current; }
	EOF;

// Rule function_body
rulefunction_body returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFunction_bodyAccess().getFunction_blockFunction_blockParserRuleCall_0());
			}
			lv_function_block_0_0=rulefunction_block
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFunction_bodyRule());
				}
				set(
					$current,
					"function_block",
					lv_function_block_0_0,
					"org.xtext.example.pascal.Pascal.function_block");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprocedure_identification
entryRuleprocedure_identification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_identificationRule()); }
	iv_ruleprocedure_identification=ruleprocedure_identification
	{ $current=$iv_ruleprocedure_identification.current; }
	EOF;

// Rule procedure_identification
ruleprocedure_identification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedure_identificationAccess().getProcedureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_identificationAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_identificationRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuledirective
entryRuledirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectiveRule()); }
	iv_ruledirective=ruledirective
	{ $current=$iv_ruledirective.current; }
	EOF;

// Rule directive
ruledirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getDirectiveAccess().getDirectiveAction_0_0(),
						$current);
				}
			)
			otherlv_1='forward'
			{
				newLeafNode(otherlv_1, grammarAccess.getDirectiveAccess().getForwardKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDirectiveAccess().getCompiler_defined_directivesCompiler_defined_directivesParserRuleCall_1_0());
				}
				lv_compiler_defined_directives_2_0=rulecompiler_defined_directives
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDirectiveRule());
					}
					set(
						$current,
						"compiler_defined_directives",
						lv_compiler_defined_directives_2_0,
						"org.xtext.example.pascal.Pascal.compiler_defined_directives");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulecompiler_defined_directives
entryRulecompiler_defined_directives returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompiler_defined_directivesRule()); }
	iv_rulecompiler_defined_directives=rulecompiler_defined_directives
	{ $current=$iv_rulecompiler_defined_directives.current; }
	EOF;

// Rule compiler_defined_directives
rulecompiler_defined_directives returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCompiler_defined_directivesAccess().getProcedure_headingProcedure_headingParserRuleCall_0());
			}
			lv_procedure_heading_0_0=ruleprocedure_heading
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCompiler_defined_directivesRule());
				}
				set(
					$current,
					"procedure_heading",
					lv_procedure_heading_0_0,
					"org.xtext.example.pascal.Pascal.procedure_heading");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprocedure_body
entryRuleprocedure_body returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_bodyRule()); }
	iv_ruleprocedure_body=ruleprocedure_body
	{ $current=$iv_ruleprocedure_body.current; }
	EOF;

// Rule procedure_body
ruleprocedure_body returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProcedure_bodyAccess().getProcedure_blockProcedure_blockParserRuleCall_0());
			}
			lv_procedure_block_0_0=ruleprocedure_block
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProcedure_bodyRule());
				}
				set(
					$current,
					"procedure_block",
					lv_procedure_block_0_0,
					"org.xtext.example.pascal.Pascal.procedure_block");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprocedure_heading
entryRuleprocedure_heading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_headingRule()); }
	iv_ruleprocedure_heading=ruleprocedure_heading
	{ $current=$iv_ruleprocedure_heading.current; }
	EOF;

// Rule procedure_heading
ruleprocedure_heading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedure'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcedure_headingAccess().getProcedureKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_headingAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_headingRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProcedure_headingAccess().getFormal_parameter_listFormal_parameter_listParserRuleCall_2_0());
				}
				lv_formal_parameter_list_2_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcedure_headingRule());
					}
					set(
						$current,
						"formal_parameter_list",
						lv_formal_parameter_list_2_0,
						"org.xtext.example.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleformal_parameter_list
entryRuleformal_parameter_list returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormal_parameter_listRule()); }
	iv_ruleformal_parameter_list=ruleformal_parameter_list
	{ $current=$iv_ruleformal_parameter_list.current; }
	EOF;

// Rule formal_parameter_list
ruleformal_parameter_list returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFormal_parameter_listAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getFormal_parameter_sectionFormal_parameter_sectionParserRuleCall_1_0());
				}
				lv_formal_parameter_section_1_0=ruleformal_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_listRule());
					}
					add(
						$current,
						"formal_parameter_section",
						lv_formal_parameter_section_1_0,
						"org.xtext.example.pascal.Pascal.formal_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getFormal_parameter_listAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormal_parameter_listAccess().getFormal_parameter_sectionFormal_parameter_sectionParserRuleCall_2_1_0());
					}
					lv_formal_parameter_section_3_0=ruleformal_parameter_section
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormal_parameter_listRule());
						}
						add(
							$current,
							"formal_parameter_section",
							lv_formal_parameter_section_3_0,
							"org.xtext.example.pascal.Pascal.formal_parameter_section");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFormal_parameter_listAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleformal_parameter_section
entryRuleformal_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormal_parameter_sectionRule()); }
	iv_ruleformal_parameter_section=ruleformal_parameter_section
	{ $current=$iv_ruleformal_parameter_section.current; }
	EOF;

// Rule formal_parameter_section
ruleformal_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getValue_parameter_sectionValue_parameter_sectionParserRuleCall_0_0());
				}
				lv_value_parameter_section_0_0=rulevalue_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"value_parameter_section",
						lv_value_parameter_section_0_0,
						"org.xtext.example.pascal.Pascal.value_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getVariable_parameter_sectionVariable_parameter_sectionParserRuleCall_1_0());
				}
				lv_variable_parameter_section_1_0=rulevariable_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"variable_parameter_section",
						lv_variable_parameter_section_1_0,
						"org.xtext.example.pascal.Pascal.variable_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getProcedure_parameter_sectionProcedure_parameter_sectionParserRuleCall_2_0());
				}
				lv_procedure_parameter_section_2_0=ruleprocedure_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"procedure_parameter_section",
						lv_procedure_parameter_section_2_0,
						"org.xtext.example.pascal.Pascal.procedure_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormal_parameter_sectionAccess().getFunction_parameter_sectionFunction_parameter_sectionParserRuleCall_3_0());
				}
				lv_function_parameter_section_3_0=rulefunction_parameter_section
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormal_parameter_sectionRule());
					}
					set(
						$current,
						"function_parameter_section",
						lv_function_parameter_section_3_0,
						"org.xtext.example.pascal.Pascal.function_parameter_section");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulefunction_parameter_section
entryRulefunction_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_parameter_sectionRule()); }
	iv_rulefunction_parameter_section=rulefunction_parameter_section
	{ $current=$iv_rulefunction_parameter_section.current; }
	EOF;

// Rule function_parameter_section
rulefunction_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFunction_parameter_sectionAccess().getFunction_headingFunction_headingParserRuleCall_0());
			}
			lv_function_heading_0_0=rulefunction_heading
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFunction_parameter_sectionRule());
				}
				set(
					$current,
					"function_heading",
					lv_function_heading_0_0,
					"org.xtext.example.pascal.Pascal.function_heading");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulefunction_heading
entryRulefunction_heading returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunction_headingRule()); }
	iv_rulefunction_heading=rulefunction_heading
	{ $current=$iv_rulefunction_heading.current; }
	EOF;

// Rule function_heading
rulefunction_heading returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunction_headingAccess().getFunctionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_headingAccess().getIdentifierIdentifierParserRuleCall_1_0());
				}
				lv_identifier_1_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_headingRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_headingAccess().getFormal_parameter_listFormal_parameter_listParserRuleCall_2_0());
				}
				lv_formal_parameter_list_2_0=ruleformal_parameter_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_headingRule());
					}
					set(
						$current,
						"formal_parameter_list",
						lv_formal_parameter_list_2_0,
						"org.xtext.example.pascal.Pascal.formal_parameter_list");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunction_headingAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunction_headingAccess().getResult_typeResult_typeParserRuleCall_4_0());
				}
				lv_result_type_4_0=ruleresult_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunction_headingRule());
					}
					set(
						$current,
						"result_type",
						lv_result_type_4_0,
						"org.xtext.example.pascal.Pascal.result_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleresult_type
entryRuleresult_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResult_typeRule()); }
	iv_ruleresult_type=ruleresult_type
	{ $current=$iv_ruleresult_type.current; }
	EOF;

// Rule result_type
ruleresult_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getResult_typeAccess().getType_identifierType_identifierParserRuleCall_0());
			}
			lv_type_identifier_0_0=ruletype_identifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getResult_typeRule());
				}
				set(
					$current,
					"type_identifier",
					lv_type_identifier_0_0,
					"org.xtext.example.pascal.Pascal.type_identifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleprocedure_parameter_section
entryRuleprocedure_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedure_parameter_sectionRule()); }
	iv_ruleprocedure_parameter_section=ruleprocedure_parameter_section
	{ $current=$iv_ruleprocedure_parameter_section.current; }
	EOF;

// Rule procedure_parameter_section
ruleprocedure_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getProcedure_parameter_sectionAccess().getProcedure_headingProcedure_headingParserRuleCall_0());
			}
			lv_procedure_heading_0_0=ruleprocedure_heading
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getProcedure_parameter_sectionRule());
				}
				set(
					$current,
					"procedure_heading",
					lv_procedure_heading_0_0,
					"org.xtext.example.pascal.Pascal.procedure_heading");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulevariable_parameter_section
entryRulevariable_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_parameter_sectionRule()); }
	iv_rulevariable_parameter_section=rulevariable_parameter_section
	{ $current=$iv_rulevariable_parameter_section.current; }
	EOF;

// Rule variable_parameter_section
rulevariable_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariable_parameter_sectionAccess().getVarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_parameter_sectionAccess().getIdentifier_listIdentifier_listParserRuleCall_1_0());
				}
				lv_identifier_list_1_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_parameter_sectionRule());
					}
					set(
						$current,
						"identifier_list",
						lv_identifier_list_1_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariable_parameter_sectionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_parameter_sectionAccess().getParameter_typeParameter_typeParserRuleCall_3_0());
				}
				lv_parameter_type_3_0=ruleparameter_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_parameter_sectionRule());
					}
					set(
						$current,
						"parameter_type",
						lv_parameter_type_3_0,
						"org.xtext.example.pascal.Pascal.parameter_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulevalue_parameter_section
entryRulevalue_parameter_section returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValue_parameter_sectionRule()); }
	iv_rulevalue_parameter_section=rulevalue_parameter_section
	{ $current=$iv_rulevalue_parameter_section.current; }
	EOF;

// Rule value_parameter_section
rulevalue_parameter_section returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValue_parameter_sectionAccess().getIdentifier_listIdentifier_listParserRuleCall_0_0());
				}
				lv_identifier_list_0_0=ruleidentifier_list
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValue_parameter_sectionRule());
					}
					set(
						$current,
						"identifier_list",
						lv_identifier_list_0_0,
						"org.xtext.example.pascal.Pascal.identifier_list");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getValue_parameter_sectionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValue_parameter_sectionAccess().getParameter_typeParameter_typeParserRuleCall_2_0());
				}
				lv_parameter_type_2_0=ruleparameter_type
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValue_parameter_sectionRule());
					}
					set(
						$current,
						"parameter_type",
						lv_parameter_type_2_0,
						"org.xtext.example.pascal.Pascal.parameter_type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleparameter_type
entryRuleparameter_type returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameter_typeRule()); }
	iv_ruleparameter_type=ruleparameter_type
	{ $current=$iv_ruleparameter_type.current; }
	EOF;

// Rule parameter_type
ruleparameter_type returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameter_typeAccess().getType_identifierType_identifierParserRuleCall_0_0());
				}
				lv_type_identifier_0_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameter_typeRule());
					}
					set(
						$current,
						"type_identifier",
						lv_type_identifier_0_0,
						"org.xtext.example.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getParameter_typeAccess().getConformant_array_schemaConformant_array_schemaParserRuleCall_1_0());
				}
				lv_conformant_array_schema_1_0=ruleconformant_array_schema
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameter_typeRule());
					}
					set(
						$current,
						"conformant_array_schema",
						lv_conformant_array_schema_1_0,
						"org.xtext.example.pascal.Pascal.conformant_array_schema");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleconformant_array_schema
entryRuleconformant_array_schema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConformant_array_schemaRule()); }
	iv_ruleconformant_array_schema=ruleconformant_array_schema
	{ $current=$iv_ruleconformant_array_schema.current; }
	EOF;

// Rule conformant_array_schema
ruleconformant_array_schema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConformant_array_schemaAccess().getPacked_conformant_array_schemaPacked_conformant_array_schemaParserRuleCall_0_0());
				}
				lv_packed_conformant_array_schema_0_0=rulepacked_conformant_array_schema
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConformant_array_schemaRule());
					}
					set(
						$current,
						"packed_conformant_array_schema",
						lv_packed_conformant_array_schema_0_0,
						"org.xtext.example.pascal.Pascal.packed_conformant_array_schema");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConformant_array_schemaAccess().getUnpacked_conformant_array_schemaUnpacked_conformant_array_schemaParserRuleCall_1_0());
				}
				lv_unpacked_conformant_array_schema_1_0=ruleunpacked_conformant_array_schema
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConformant_array_schemaRule());
					}
					set(
						$current,
						"unpacked_conformant_array_schema",
						lv_unpacked_conformant_array_schema_1_0,
						"org.xtext.example.pascal.Pascal.unpacked_conformant_array_schema");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleunpacked_conformant_array_schema
entryRuleunpacked_conformant_array_schema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaRule()); }
	iv_ruleunpacked_conformant_array_schema=ruleunpacked_conformant_array_schema
	{ $current=$iv_ruleunpacked_conformant_array_schema.current; }
	EOF;

// Rule unpacked_conformant_array_schema
ruleunpacked_conformant_array_schema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='array'
		{
			newLeafNode(otherlv_0, grammarAccess.getUnpacked_conformant_array_schemaAccess().getArrayKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getUnpacked_conformant_array_schemaAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getBound_specificationBound_specificationParserRuleCall_2_0());
				}
				lv_bound_specification_2_0=rulebound_specification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnpacked_conformant_array_schemaRule());
					}
					add(
						$current,
						"bound_specification",
						lv_bound_specification_2_0,
						"org.xtext.example.pascal.Pascal.bound_specification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getUnpacked_conformant_array_schemaAccess().getSemicolonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getBound_specificationBound_specificationParserRuleCall_3_1_0());
					}
					lv_bound_specification_4_0=rulebound_specification
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnpacked_conformant_array_schemaRule());
						}
						add(
							$current,
							"bound_specification",
							lv_bound_specification_4_0,
							"org.xtext.example.pascal.Pascal.bound_specification");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getUnpacked_conformant_array_schemaAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_6='of'
		{
			newLeafNode(otherlv_6, grammarAccess.getUnpacked_conformant_array_schemaAccess().getOfKeyword_5());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getType_identifierType_identifierParserRuleCall_6_0_0());
					}
					lv_type_identifier_7_0=ruletype_identifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnpacked_conformant_array_schemaRule());
						}
						set(
							$current,
							"type_identifier",
							lv_type_identifier_7_0,
							"org.xtext.example.pascal.Pascal.type_identifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getUnpacked_conformant_array_schemaAccess().getConformant_array_schemaConformant_array_schemaParserRuleCall_6_1_0());
					}
					lv_conformant_array_schema_8_0=ruleconformant_array_schema
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnpacked_conformant_array_schemaRule());
						}
						set(
							$current,
							"conformant_array_schema",
							lv_conformant_array_schema_8_0,
							"org.xtext.example.pascal.Pascal.conformant_array_schema");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulebound_specification
entryRulebound_specification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBound_specificationRule()); }
	iv_rulebound_specification=rulebound_specification
	{ $current=$iv_rulebound_specification.current; }
	EOF;

// Rule bound_specification
rulebound_specification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_specificationAccess().getIdentifierIdentifierParserRuleCall_0_0());
				}
				lv_identifier_0_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_specificationRule());
					}
					set(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getBound_specificationAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_specificationAccess().getIdentifier2IdentifierParserRuleCall_2_0());
				}
				lv_identifier2_2_0=ruleidentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_specificationRule());
					}
					set(
						$current,
						"identifier2",
						lv_identifier2_2_0,
						"org.xtext.example.pascal.Pascal.identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getBound_specificationAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBound_specificationAccess().getOrdinal_type_identifierOrdinal_type_identifierParserRuleCall_4_0());
				}
				lv_ordinal_type_identifier_4_0=ruleordinal_type_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBound_specificationRule());
					}
					set(
						$current,
						"ordinal_type_identifier",
						lv_ordinal_type_identifier_4_0,
						"org.xtext.example.pascal.Pascal.ordinal_type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleordinal_type_identifier
entryRuleordinal_type_identifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrdinal_type_identifierRule()); }
	iv_ruleordinal_type_identifier=ruleordinal_type_identifier
	{ $current=$iv_ruleordinal_type_identifier.current; }
	EOF;

// Rule ordinal_type_identifier
ruleordinal_type_identifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getOrdinal_type_identifierAccess().getType_identifierType_identifierParserRuleCall_0());
			}
			lv_type_identifier_0_0=ruletype_identifier
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getOrdinal_type_identifierRule());
				}
				set(
					$current,
					"type_identifier",
					lv_type_identifier_0_0,
					"org.xtext.example.pascal.Pascal.type_identifier");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRulepacked_conformant_array_schema
entryRulepacked_conformant_array_schema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPacked_conformant_array_schemaRule()); }
	iv_rulepacked_conformant_array_schema=rulepacked_conformant_array_schema
	{ $current=$iv_rulepacked_conformant_array_schema.current; }
	EOF;

// Rule packed_conformant_array_schema
rulepacked_conformant_array_schema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='packed'
		{
			newLeafNode(otherlv_0, grammarAccess.getPacked_conformant_array_schemaAccess().getPackedKeyword_0());
		}
		otherlv_1='array'
		{
			newLeafNode(otherlv_1, grammarAccess.getPacked_conformant_array_schemaAccess().getArrayKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getPacked_conformant_array_schemaAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPacked_conformant_array_schemaAccess().getBound_specificationBound_specificationParserRuleCall_3_0());
				}
				lv_bound_specification_3_0=rulebound_specification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPacked_conformant_array_schemaRule());
					}
					set(
						$current,
						"bound_specification",
						lv_bound_specification_3_0,
						"org.xtext.example.pascal.Pascal.bound_specification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getPacked_conformant_array_schemaAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_5='of'
		{
			newLeafNode(otherlv_5, grammarAccess.getPacked_conformant_array_schemaAccess().getOfKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPacked_conformant_array_schemaAccess().getType_identifierType_identifierParserRuleCall_6_0());
				}
				lv_type_identifier_6_0=ruletype_identifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPacked_conformant_array_schemaRule());
					}
					set(
						$current,
						"type_identifier",
						lv_type_identifier_6_0,
						"org.xtext.example.pascal.Pascal.type_identifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleoutput_value
entryRuleoutput_value returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutput_valueRule()); }
	iv_ruleoutput_value=ruleoutput_value
	{ $current=$iv_ruleoutput_value.current; }
	EOF;

// Rule output_value
ruleoutput_value returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOutput_valueAccess().getExpressionParserRuleCall_0());
		}
		this_expression_0=ruleexpression
		{
			$current = $this_expression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getOutput_valueAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutput_valueAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutput_valueRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.xtext.example.pascal.Pascal.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=':'
				{
					newLeafNode(otherlv_3, grammarAccess.getOutput_valueAccess().getColonKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOutput_valueAccess().getExpressionExpressionParserRuleCall_1_2_1_0());
						}
						lv_expression_4_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOutput_valueRule());
							}
							add(
								$current,
								"expression",
								lv_expression_4_0,
								"org.xtext.example.pascal.Pascal.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)?
	)
;

RULE_STRINGS : '\'' ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'^'|'?'|'.'|'/'|'\\'|'*'|'%'|'&'|'@'|'#'|'('|')'|'$'|'='|'{'|'}'|'['|']'|','|'!'|'|'|'+'|'-')* '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
