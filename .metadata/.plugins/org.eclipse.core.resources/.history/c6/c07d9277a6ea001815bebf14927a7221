grammar org.xtext.example.pascal.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/example/pascal/Pascal"

Begin:
	elements += program
;

program:{program}
	(program_heading=program_heading block=block ".")? ;
	
program_heading:
	"program" identifier=ID ("(" identifier_list=identifier_list ")" ) ? ";";

identifier_list:
	identifier+=ID ( "," identifier+=ID )*;

procedure_block:
	declaration_part=declaration_part statement_part=statement_part;

function_block:
	declaration_part=declaration_part statement_part=statement_part;

block:
	declaration_part=declaration_part statement_part=statement_part;

statement_part:
	"begin" statement_sequence=statement_sequence "end"
;

statement_sequence:
	statement+=statement (";" statement+=statement)*
;

statement:
	(label=label ":")? (simple_statement=simple_statement | structured_statement=structured_statement)
;

simple_statement: {simple_statement}
	( assignment_statement=assignment_statement | procedure_statement=procedure_statement | goto_statement=goto_statement)?
;

goto_statement:
	"goto" label=label
;

procedure_statement:
	procedure_identifier=identifier (actual_parameter_list=actual_parameter_list)?
;

actual_parameter_list:
	"(" actual_parameter+=actual_parameter ("," actual_parameter+=actual_parameter)* ")"
;

actual_parameter:
	actual_value=actual_value | actual_variable=actual_variable | actual_procedure=actual_procedure | actual_function=actual_function
;

actual_function:
	function_identifier=identifier
;

actual_procedure:
	procedure_identifier=identifier
;

actual_variable:
	variable=variable
;

actual_value:
	expression=expression
;

identifier:
	identifier=ID
;

assignment_statement:
	(variable=variable | function_identifier=identifier) ":=" expression=expression
;

expression: {expression}
	simple_expression+=simple_expression (relational_operator=relational_operator simple_expression+=simple_expression)?
;

relational_operator:
	"=" | "<>" | "<" | "<=" | ">" | ">=" | "in"
;

simple_expression:
	(sign=sign)? term+=term (addition_operator+=addition_operator term+=term)*
;

addition_operator:
	sign=sign | "or"
;

term:
	factor+=factor (multiplication_operator+=multiplication_operator factor+=factor)*
;

multiplication_operator:
	"*" | "/" | "div" | "mod" | "and"
;

factor: {factor}
	variable=variable | number=number | strings=strings | "nil" | boolean=boolean 
	| identifier=identifier
	| function_designator=function_designator | "(" expression=expression ")" | "not" factor=factor	
;

boolean:
	"True" | "False"
;

function_designator:
	function_identifier=identifier (actual_parameter_list=actual_parameter_list)?
;

terminal strings:
	"'" ('a'..'z' |'A'..'Z'|'_'|'0'..'9' | '^' | "?" | "." | "/" | "\\" | "*" | "%" | "&" | "@" | "#" | "(" | ")" | "$" | "=" | "{" | "}" | "[" | "]" | "," | "!" |"|" | "+" | "-")* "'"
;

number:
	integer_number=integer_number | real_number=real_number
;

real_number:
	digit_sequence=digit_sequence "." (digit_sequence2=digit_sequence)? (scale_factor=scale_factor)? |
	digit_sequence=digit_sequence scale_factor=scale_factor
;

scale_factor:
	("E" | "e") (sign=sign)? digit_sequence=digit_sequence
;

variable:
	entire_variable=entire_variable 
	("[" expression_list+=expression_list "]" )*
	("." field_identifier+=identifier )*
	("^")*  ("^")*
;

entire_variable:
	identifier=identifier
;
expression_list:
	expression+=expression ("," expression+=expression)*
;

label:
	integer_number=integer_number
;

integer_number:
	digit_sequence=digit_sequence
;

digit_sequence:
	(sign=sign)? unsigned_digit_sequence=unsigned_digit_sequence
;

sign:
	"+" | "-"
;

unsigned_digit_sequence:
	INT
;

structured_statement:
	compound_statement=compound_statement | repetitive_statement=repetitive_statement | with_statement=with_statement
;

with_statement:
	"with" variable+=variable ("," variable+=variable)* "do" statement=statement	
;

conditional_statement:
	if_statement=if_statement | case_statement=case_statement
;

case_statement:
	"case" expression=expression "of"
	case_limb+=case_limb (";" case_limb+=case_limb)* (";")?
	"end"
;

case_limb:
	case_label_list=case_label_list ":" statement=statement
;

case_label_list:
	constant+=constant ("," constant+=constant)*
;

if_statement:
	"if" expression=expression "then" statement+=statement ("else" statement+=statement)?
;

repetitive_statement:
	while_statement=while_statement | repeat_statement=repeat_statement | for_statement=for_statement
;

for_statement:
	"for" variable_identifier=identifier ":=" initial_expression=initial_expression ("to" | "downto") final_expression=final_expression "do" statement=statement
;

final_expression:
	expression=expression
;

initial_expression:
	expression=expression
;

repeat_statement:
	"repeat" statement_sequence=statement_sequence "until" expression=expression
;

while_statement:
	"while" expression=expression "do" statement=statement
;

compound_statement:
	"begin" statement_sequence=statement_sequence "end"
;
	
declaration_part: {declaration_part}
	(label_declaration_part=label_declaration_part)?
	(constant_definition_part=constant_definition_part)?
	(type_definition_part=type_definition_part)?
	(variable_declaration_part=variable_declaration_part)?
	(
		(procedure_heading+=procedure_heading ";" procedure_body+=procedure_body |
		procedure_heading+=procedure_heading ";" directive+=directive |
		procedure_identification+=procedure_identification ";" procedure_body+=procedure_body |
		
		function_heading+=function_heading ";" function_body+=function_body |
		function_heading+=function_heading ";" directive+=directive |
		function_identification+=function_identification ";" function_body+=function_body) ";")*	
	
;

label_declaration_part:
	"label" label+=label ("," label+=label)* ";"
;

constant_definition_part:
	"const" constant_definition+=constant_definition ";" (constant_definition+=constant_definition ";")*
;

constant_definition:
	identifier=identifier "=" constant=constant
;

constant:
	(sign=sign)? (constant_identifier=identifier | number=number) | strings=strings | boolean=boolean
;

type_definition_part:
	"type" type_definition+=type_definition ";" (type_definition+=type_definition ";")*
;

type_definition:
	identifier=identifier "=" type=type
;

type:
	simple_type=simple_type | structured_type=structured_type 
	| pointer_type=pointer_type | type_identifier=type_identifier
;

type_identifier:
	identifier=identifier
;

pointer_type:
	"^" type_identifier=type_identifier
;

structured_type:
	("packed")? unpacked_structured_type=unpacked_structured_type
;

unpacked_structured_type:
	array_type=array_type | set_type=set_type | file_type=file_type	
;

file_type:
	"file" "of" file_component_type=file_component_type
;

file_component_type:
	type=type
;

set_type:
	"set" "of" base_type=base_type
;

base_type:
	type=type	
;

array_type:
	"array" "[" index_type+=index_type ("," index_type+=index_type)* "]" "of" element_type=element_type
;

element_type:
	type=type
;

index_type:
	simple_type=simple_type
;

simple_type:
	subrange_type=subrange_type | enumerated_type=enumerated_type
;

enumerated_type:
	"(" identifier_list=identifier_list ")"
;

subrange_type:
	lower_bound=lower_bound ".." upper_bound=upper_bound
;

lower_bound:
	constant=constant
;

upper_bound:
	constant=constant
;

variable_declaration_part:
	"var" variable_declaration+=variable_declaration ";" (variable_declaration+=variable_declaration ";")*
;

variable_declaration:
	identifier_list=identifier_list ":" type=type
;

function_identification:
	"function" function_identifier=identifier
;

function_body:
	function_block=function_block
;


procedure_identification:
	"procedure" identifier=identifier
;

directive: {directive}
	"forward" | compiler_defined_directives=compiler_defined_directives
;

compiler_defined_directives:
	// TODO
	procedure_heading=procedure_heading
;

procedure_body:
	procedure_block=procedure_block
;

procedure_heading:
	"procedure" identifier=identifier (formal_parameter_list=formal_parameter_list)?
;

formal_parameter_list:
	"(" formal_parameter_section+=formal_parameter_section (";" formal_parameter_section+=formal_parameter_section)* ")"
;

formal_parameter_section:
	value_parameter_section=value_parameter_section |
	variable_parameter_section=variable_parameter_section |
	procedure_parameter_section=procedure_parameter_section |
	function_parameter_section=function_parameter_section
;

function_parameter_section:
	function_heading=function_heading
;

function_heading:
	"function" identifier=identifier (formal_parameter_list=formal_parameter_list)? ":" result_type=result_type
;

result_type:
	type_identifier=type_identifier
;

procedure_parameter_section:
	procedure_heading=procedure_heading
;

variable_parameter_section:
	"var" identifier_list=identifier_list ":" parameter_type=parameter_type
;

value_parameter_section:
	identifier_list=identifier_list ":" parameter_type=parameter_type
;

parameter_type:
	type_identifier=type_identifier | conformant_array_schema=conformant_array_schema
;

conformant_array_schema:
	packed_conformant_array_schema=packed_conformant_array_schema |
	unpacked_conformant_array_schema=unpacked_conformant_array_schema
;

unpacked_conformant_array_schema:
	"array" "[" bound_specification+=bound_specification (";" bound_specification+=bound_specification)* "]"
	"of" (type_identifier=type_identifier | conformant_array_schema=conformant_array_schema)
;

bound_specification:
	identifier=identifier ".." identifier2=identifier ":" ordinal_type_identifier=ordinal_type_identifier
;

ordinal_type_identifier:
	type_identifier=type_identifier
;

packed_conformant_array_schema:
	"packed" "array" "[" bound_specification=bound_specification "]" "of" type_identifier=type_identifier
; 

output_list:
	output_value ("," output_value+=output_value)*;
	
output_value:
	expression (";" expression+=expression (":" expression+=expression)? )?;